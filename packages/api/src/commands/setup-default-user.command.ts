import { UserType } from '@gymspace/shared';
import { Command, CommandRunner } from 'nest-commander';
import { AuthService } from '../core/auth/services/auth.service';
import { PrismaService } from '../core/database/prisma.service';
import { OnboardingService } from '../modules/onboarding/onboarding.service';
import { ProductsService } from '../modules/products/products.service';
import { ClientsService } from '../modules/clients/clients.service';
import { RequestContext } from '../common/services/request-context.service';

@Command({
  name: 'setup-user',
  description: 'Create a default admin user with complete onboarding, products, and clients',
})
export class SetupDefaultUserCommand extends CommandRunner {
  constructor(
    private readonly onboardingService: OnboardingService,
    private readonly authService: AuthService,
    private readonly prismaService: PrismaService,
    private readonly productsService: ProductsService,
    private readonly clientsService: ClientsService,
  ) {
    super();
  }

  async run(): Promise<void> {
    console.log('üöÄ Starting default setup: user, products, and clients...\n');

    // Debug logging
    console.log('Services:', {
      onboarding: !!this.onboardingService,
      auth: !!this.authService,
      prisma: !!this.prismaService,
    });

    try {
      // Wait for Prisma to be ready
      if (!this.prismaService) {
        throw new Error('PrismaService is not injected properly');
      }
      await this.prismaService.$connect();
      console.log('‚úÖ Connected to database');

      // Default user details for Peru
      const email = 'admin@gymspace.pe';
      const password = '182@Alfk3458';
      const name = 'Administrador Principal';
      const phone = '+51999888777';
      const organizationName = 'Gimnasio Elite Lima';

      // Check if user already exists
      const existingUser = await this.prismaService.user.findUnique({
        where: { email },
      });

      if (existingUser) {
        console.log('‚ö†Ô∏è  User already exists with email:', email);
        console.log('üÜî Existing User ID:', existingUser.id);
        console.log('‚úÖ Skipping user creation.\n');
        return;
      }

      console.log('üìß Creating user with email:', email);

      // Get default free subscription plan
      const defaultPlan = await this.prismaService.subscriptionPlan.findFirst({
        where: {
          price: {
            path: ['USD', 'value'],
            equals: 0,
          },
        },
      });

      if (!defaultPlan) {
        throw new Error('No free subscription plan found. Please run database seed first.');
      }

      console.log('üì¶ Using subscription plan:', defaultPlan.name);

      // Step 1: Start onboarding process (creates user, organization, and gym)
      console.log('\nüéØ Starting onboarding process...');
      const onboardingResult = await this.onboardingService.startOnboarding({
        email,
        password,
        name,
        phone,
        organizationName,
        country: 'PE',
        currency: 'PEN',
        timezone: 'America/Lima',
        subscriptionPlanId: defaultPlan.id,
      });

      console.log('‚úÖ Onboarding started successfully');
      console.log('üè¢ Organizaci√≥n:', onboardingResult.organization.name);
      console.log('üèãÔ∏è  Gimnasio:', onboardingResult.gym.name);
      console.log('üë§ Usuario:', onboardingResult.user.email);

      // Step 2: Verify email (simulate email verification)
      console.log('\nüìß Verifying email...');

      // Get the verification code from the database
      const userWithCode = await this.prismaService.user.findUnique({
        where: { id: onboardingResult.user.id },
        select: { verificationCode: true },
      });

      if (userWithCode?.verificationCode) {
        await this.authService.verifyEmail({
          email,
          code: userWithCode.verificationCode,
        });
        console.log('‚úÖ Email verified successfully');
      } else {
        console.log('‚ö†Ô∏è  No verification code found, skipping email verification');
      }

      // Step 3: Update gym settings (minimal setup for demo)
      console.log('\n‚öôÔ∏è  Configuring gym settings...');

      // Create a proper RequestContext for service calls
      const context = new RequestContext()
        .forUser({
          id: onboardingResult.user.id,
          email: onboardingResult.user.email,
          name: onboardingResult.user.name,
          userType: UserType.OWNER,
        } as any)
        .withGym({
          id: onboardingResult.gym.id,
          name: onboardingResult.gym.name,
        } as any)
        .withOrganization({
          id: onboardingResult.organization.id,
          name: onboardingResult.organization.name,
        } as any)
        .withPermissions([]);

      await this.onboardingService.updateGymSettings(context, {
        gymId: onboardingResult.gym.id,
        name: 'Gimnasio Elite Lima',
        address: 'Av. Javier Prado Este 4200',
        city: 'Lima',
        state: 'Lima',
        postalCode: '15023',
        phone: '+51999888777',
        email: 'contacto@gimnasioelite.pe',
        capacity: 150,
        description: 'El mejor gimnasio de Lima con equipamiento de √∫ltima generaci√≥n',
        businessHours: {
          monday: { open: '06:00', close: '22:00', closed: false },
          tuesday: { open: '06:00', close: '22:00', closed: false },
          wednesday: { open: '06:00', close: '22:00', closed: false },
          thursday: { open: '06:00', close: '22:00', closed: false },
          friday: { open: '06:00', close: '22:00', closed: false },
          saturday: { open: '08:00', close: '18:00', closed: false },
          sunday: { open: '08:00', close: '18:00', closed: false },
        },
        socialMedia: {
          facebook: 'https://facebook.com/gimnasioelitelima',
          instagram: 'https://instagram.com/gimnasioelitelima',
        },
      });

      console.log('‚úÖ Gym settings configured');


      // Step 4: Complete guided setup
      console.log('\nüèÅ Completing guided setup...');
      await this.onboardingService.completeGuidedSetup(context, {
        gymId: onboardingResult.gym.id,
      });

      console.log('‚úÖ Guided setup completed');

      // Step 5: Initialize default products and services
      console.log('\nüì¶ Creating default products...');
      const defaultProducts = [
        {
          name: 'Prote√≠na Whey',
          description: 'Prote√≠na de suero de leche premium para desarrollo muscular',
          price: 120.0,
          currency: 'PEN',
          stock: 50,
          barcode: 'PROT001',
          sku: 'WHY-001',
        },
        {
          name: 'Creatina Monohidratada',
          description: 'Creatina pura para mejorar rendimiento y fuerza',
          price: 85.0,
          currency: 'PEN',
          stock: 30,
          barcode: 'CREA001',
          sku: 'CRE-001',
        },
        {
          name: 'BCAA Amino√°cidos',
          description: 'Amino√°cidos de cadena ramificada para recuperaci√≥n muscular',
          price: 95.0,
          currency: 'PEN',
          stock: 25,
          barcode: 'BCAA001',
          sku: 'BCA-001',
        },
        {
          name: 'Pre-Entreno',
          description: 'F√≥rmula pre-entrenamiento para energ√≠a y enfoque',
          price: 110.0,
          currency: 'PEN',
          stock: 20,
          barcode: 'PRE001',
          sku: 'PRE-001',
        },
        {
          name: 'Botella de Agua Deportiva',
          description: 'Botella de 1 litro con logo del gimnasio',
          price: 25.0,
          currency: 'PEN',
          stock: 100,
          barcode: 'BOT001',
          sku: 'BOT-001',
        },
      ];

      for (const product of defaultProducts) {
        try {
          // Remove currency from product data as it's not part of the Product model
          const { currency, ...productData } = product;
          await this.productsService.createProduct(context, productData as any);
          console.log(`‚úÖ Producto creado: ${product.name}`);
        } catch (error) {
          console.log(`‚ö†Ô∏è  Error creando producto ${product.name}:`, error.message);
        }
      }

      // Step 5.1: Initialize default services
      console.log('\nüõéÔ∏è Creating default services...');
      const defaultServices = [
        {
          name: 'Entrenamiento Personal',
          description: 'Sesi√≥n personalizada de entrenamiento con instructor certificado',
          price: 150.0,
        },
        {
          name: 'Evaluaci√≥n F√≠sica Completa',
          description: 'Evaluaci√≥n antropom√©trica, composici√≥n corporal y plan de entrenamiento',
          price: 80.0,
        },
        {
          name: 'Clase de Yoga',
          description: 'Clase grupal de yoga para flexibilidad y relajaci√≥n',
          price: 30.0,
        },
        {
          name: 'Clase de Spinning',
          description: 'Entrenamiento cardiovascular intenso en bicicleta est√°tica',
          price: 35.0,
        },
        {
          name: 'Nutrici√≥n Deportiva',
          description: 'Consulta nutricional y plan alimenticio personalizado',
          price: 120.0,
        },
        {
          name: 'Masaje Deportivo',
          description: 'Masaje terap√©utico para recuperaci√≥n muscular',
          price: 100.0,
        },
      ];

      for (const service of defaultServices) {
        try {
          await this.productsService.createService(context, service);
          console.log(`‚úÖ Servicio creado: ${service.name}`);
        } catch (error) {
          console.log(`‚ö†Ô∏è  Error creando servicio ${service.name}:`, error.message);
        }
      }

      // Step 6: Initialize default clients
      console.log('\nüë• Creating default clients...');
      const defaultClients = [
        {
          name: 'Carlos Rodriguez',
          email: 'carlos.rodriguez@example.com',
          phone: '+51987654321',
          documentType: 'dni',
          documentValue: '12345678',
          birthDate: '1990-05-15',
          address: 'Av. Javier Prado 123, San Isidro',
          notes: 'Contacto de emergencia: Mar√≠a Rodriguez - +51987654322',
        },
        {
          name: 'Ana Garc√≠a',
          email: 'ana.garcia@example.com',
          phone: '+51987654323',
          documentType: 'dni',
          documentValue: '87654321',
          birthDate: '1995-08-20',
          address: 'Calle Los √Ålamos 456, Miraflores',
          notes: 'Contacto de emergencia: Pedro Garc√≠a - +51987654324',
        },
        {
          name: 'Luis Mendoza',
          email: 'luis.mendoza@example.com',
          phone: '+51987654325',
          documentType: 'dni',
          documentValue: '23456789',
          birthDate: '1988-12-10',
          address: 'Jr. Las Flores 789, Surco',
          notes: 'Contacto de emergencia: Sofia Mendoza - +51987654326',
        },
        {
          name: 'Mar√≠a Torres',
          email: 'maria.torres@example.com',
          phone: '+51987654327',
          documentType: 'dni',
          documentValue: '34567890',
          birthDate: '1992-03-25',
          address: 'Av. Larco 321, Barranco',
          notes: 'Contacto de emergencia: Juan Torres - +51987654328',
        },
        {
          name: 'Roberto Vargas',
          email: 'roberto.vargas@example.com',
          phone: '+51987654329',
          documentType: 'dni',
          documentValue: '45678901',
          birthDate: '1985-11-18',
          address: 'Calle Las Palmeras 654, San Borja',
          notes: 'Contacto de emergencia: Carmen Vargas - +51987654330',
        },
      ];

      for (const client of defaultClients) {
        try {
          await this.clientsService.createClient(context, client);
          console.log(`‚úÖ Cliente creado: ${client.name}`);
        } catch (error) {
          console.log(`‚ö†Ô∏è  Error creando cliente ${client.name}:`, error.message);
        }
      }

      // Display the created user information
      console.log('\n========================================');
      console.log('üéâ USUARIO CREADO EXITOSAMENTE! üéâ');
      console.log('========================================');
      console.log('üìß Correo:', email);
      console.log('üîë Contrase√±a:', password);
      console.log('üÜî ID de Usuario:', onboardingResult.user.id);
      console.log('üè¢ Organizaci√≥n:', onboardingResult.organization.name);
      console.log('üèãÔ∏è  Gimnasio:', onboardingResult.gym.name);
      console.log('‚úâÔ∏è  Correo Verificado: S√≠');
      console.log('üöÄ Estado de Configuraci√≥n: Completado');
      console.log('üîê Token de Acceso:', onboardingResult.access_token.substring(0, 20) + '...');
      console.log('üáµüá™ Pa√≠s: Per√∫');
      console.log('üí∞ Moneda: PEN (Soles)');
      console.log('üïê Zona Horaria: America/Lima');
      console.log('üì¶ Productos Creados: 5');
      console.log('üõéÔ∏è Servicios Creados: 6');
      console.log('üë• Clientes Creados: 5');
      console.log('========================================\n');

      console.log(
        '‚ÑπÔ∏è  Ahora puede iniciar sesi√≥n con estas credenciales y comenzar a usar el sistema.',
      );
    } catch (error: any) {
      console.error('‚ùå Error setting up default user:', error.message || error);
      if (error.stack) {
        console.error('Stack trace:', error.stack);
      }
      throw error;
    } finally {
      await this.prismaService.$disconnect();
      console.log('‚úÖ Disconnected from database');
    }
  }
}
