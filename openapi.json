{
  "openapi": "3.0.0",
  "paths": {
    "/api/v1/subscriptions/plans": {
      "get": {
        "operationId": "SubscriptionsController_getAvailablePlans",
        "summary": "Get available subscription plans (currently only free plans)",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of available subscription plans",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AvailablePlanDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Subscriptions"
        ]
      }
    },
    "/api/v1/subscriptions/organizations/{organizationId}/status": {
      "get": {
        "operationId": "SubscriptionsController_getSubscriptionStatus",
        "summary": "Get subscription status for an organization",
        "parameters": [
          {
            "name": "organizationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Current subscription status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionStatusDto"
                }
              }
            }
          }
        },
        "tags": [
          "Subscriptions"
        ]
      }
    },
    "/api/v1/subscriptions/organizations/{organizationId}/affiliate": {
      "post": {
        "operationId": "SubscriptionsController_affiliateOrganization",
        "summary": "Affiliate organization to a subscription plan",
        "description": "Currently only allows affiliation to free plans. The organization owner must perform this action.",
        "parameters": [
          {
            "name": "organizationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AffiliateOrganizationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated subscription status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionStatusDto"
                }
              }
            }
          }
        },
        "tags": [
          "Subscriptions"
        ]
      }
    },
    "/api/v1/subscriptions/organizations/{organizationId}/limits/{limitType}": {
      "get": {
        "operationId": "SubscriptionsController_checkSubscriptionLimit",
        "summary": "Check subscription limits",
        "description": "Check if an organization can perform an action based on subscription limits. Limit types: gyms, clients, users",
        "parameters": [
          {
            "name": "organizationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limitType",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Limit check result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "canPerform": {
                      "type": "boolean"
                    },
                    "currentUsage": {
                      "type": "number"
                    },
                    "limit": {
                      "type": "number"
                    },
                    "message": {
                      "type": "string",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Subscriptions"
        ]
      }
    },
    "/api/v1/health": {
      "get": {
        "operationId": "HealthController_health",
        "summary": "Health check endpoint",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Health"
        ]
      }
    },
    "/api/v1/health/ready": {
      "get": {
        "operationId": "HealthController_ready",
        "summary": "Readiness check endpoint",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Health"
        ]
      }
    },
    "/api/v1/auth/register/owner": {
      "post": {
        "operationId": "AuthController_registerOwner",
        "summary": "Register a new gym owner",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterOwnerDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Owner registered successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "409": {
            "description": "Email already exists"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "operationId": "AuthController_login",
        "summary": "User login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/refresh": {
      "post": {
        "operationId": "AuthController_refreshToken",
        "summary": "Refresh access token",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Token refreshed successfully"
          },
          "401": {
            "description": "Invalid refresh token"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/generate-verification-code": {
      "post": {
        "operationId": "AuthController_generateVerificationCode",
        "summary": "Generate and send verification code to email",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateVerificationCodeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verification code sent successfully"
          },
          "400": {
            "description": "Invalid request or email already verified"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/verify-email": {
      "post": {
        "operationId": "AuthController_verifyEmail",
        "summary": "Verify email with verification code",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEmailDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email verified successfully"
          },
          "400": {
            "description": "Invalid or expired code"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/resend-verification": {
      "post": {
        "operationId": "AuthController_resendVerification",
        "summary": "Resend email verification code",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResendVerificationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verification code sent"
          },
          "400": {
            "description": "Email already verified or invalid"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/subscription-plans": {
      "get": {
        "operationId": "AuthController_getSubscriptionPlans",
        "summary": "Get available subscription plans",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of subscription plans"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/invitation/{token}": {
      "get": {
        "operationId": "AuthController_validateInvitation",
        "summary": "Validate invitation token",
        "parameters": [
          {
            "name": "token",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invitation details"
          },
          "404": {
            "description": "Invalid or expired invitation"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/register/collaborator": {
      "post": {
        "operationId": "AuthController_registerCollaborator",
        "summary": "Complete collaborator registration with invitation",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterCollaboratorDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Collaborator registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid invitation or data"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/current-session": {
      "get": {
        "operationId": "AuthController_getCurrentSession",
        "summary": "Get current user session information",
        "parameters": [
          {
            "name": "authorization",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Current session information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentSessionDto"
                }
              }
            }
          },
          "401": {
            "description": "User not authenticated"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/logout": {
      "post": {
        "operationId": "AuthController_logout",
        "summary": "Logout current user and invalidate token",
        "parameters": [
          {
            "name": "authorization",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Logout successful"
          },
          "401": {
            "description": "User not authenticated"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/change-password": {
      "post": {
        "operationId": "AuthController_changePassword",
        "summary": "Change password for authenticated user",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password changed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePasswordResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid current password or validation error"
          },
          "401": {
            "description": "User not authenticated"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/password-reset/request": {
      "post": {
        "operationId": "AuthController_requestPasswordReset",
        "summary": "Request password reset code",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestPasswordResetDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset code sent if email exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestPasswordResetResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/password-reset/verify-code": {
      "post": {
        "operationId": "AuthController_verifyResetCode",
        "summary": "Verify password reset code and get reset token",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyResetCodeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Code verified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyResetCodeResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or expired code"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/password-reset/reset": {
      "post": {
        "operationId": "AuthController_resetPassword",
        "summary": "Reset password with token",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResetPasswordResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid token or password"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/password-reset/resend-code": {
      "post": {
        "operationId": "AuthController_resendResetCode",
        "summary": "Resend password reset code",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResendResetCodeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reset code resent if email exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResendResetCodeResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Too many requests or invalid email"
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/invitations": {
      "post": {
        "operationId": "InvitationsController_createInvitation",
        "summary": "Create invitation for collaborator",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInvitationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Invitation created successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Invitations"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "InvitationsController_getGymInvitations",
        "summary": "Get pending invitations for gym",
        "parameters": [
          {
            "name": "gymId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of pending invitations"
          }
        },
        "tags": [
          "Invitations"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/invitations/{token}/accept": {
      "post": {
        "operationId": "InvitationsController_acceptInvitation",
        "summary": "Accept invitation",
        "parameters": [
          {
            "name": "token",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcceptInvitationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invitation accepted successfully"
          },
          "400": {
            "description": "Invalid or expired invitation"
          },
          "404": {
            "description": "Invitation not found"
          }
        },
        "tags": [
          "Invitations"
        ]
      }
    },
    "/api/v1/invitations/{id}/cancel": {
      "put": {
        "operationId": "InvitationsController_cancelInvitation",
        "summary": "Cancel pending invitation",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invitation cancelled successfully"
          },
          "400": {
            "description": "Cannot cancel this invitation"
          },
          "404": {
            "description": "Invitation not found"
          }
        },
        "tags": [
          "Invitations"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/users/profile": {
      "get": {
        "operationId": "UsersController_getProfile",
        "summary": "Get current user profile",
        "description": "Retrieves the profile information of the currently authenticated user",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileDto"
                }
              }
            }
          },
          "401": {
            "description": "User is not authenticated"
          },
          "404": {
            "description": "User not found"
          }
        },
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "UsersController_updateProfile",
        "summary": "Update current user profile",
        "description": "Updates the profile information of the currently authenticated user. Email cannot be updated through this endpoint.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "User is not authenticated"
          },
          "404": {
            "description": "User not found"
          }
        },
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/organizations/list": {
      "get": {
        "operationId": "OrganizationsController_listOrganizations",
        "summary": "List all organizations (SUPER_ADMIN only)",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all organizations with owner and gyms",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListOrganizationsResponseDto"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Super admin access required"
          }
        },
        "tags": [
          "Organizations"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/organizations/{id}": {
      "get": {
        "operationId": "OrganizationsController_getOrganization",
        "summary": "Get organization details",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization details"
          },
          "404": {
            "description": "Organization not found"
          }
        },
        "tags": [
          "Organizations"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "OrganizationsController_updateOrganization",
        "summary": "Update organization name",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrganizationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization name updated successfully"
          },
          "404": {
            "description": "Organization not found"
          }
        },
        "tags": [
          "Organizations"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/organizations/{id}/stats": {
      "get": {
        "operationId": "OrganizationsController_getOrganizationStats",
        "summary": "Get organization statistics and usage",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization statistics"
          },
          "404": {
            "description": "Organization not found"
          }
        },
        "tags": [
          "Organizations"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/gyms": {
      "post": {
        "operationId": "GymsController_createGym",
        "summary": "Create a new gym",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGymDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Gym created successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden - Gym limit reached"
          }
        },
        "tags": [
          "Gyms"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "GymsController_getOrganizationGyms",
        "summary": "Get gyms for organization",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of gyms"
          }
        },
        "tags": [
          "Gyms"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/gyms/current": {
      "put": {
        "operationId": "GymsController_updateCurrentGym",
        "summary": "Update current gym in session",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCurrentGymDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Current gym updated successfully"
          },
          "404": {
            "description": "Gym not found"
          }
        },
        "tags": [
          "Gyms"
        ],
        "security": [
          {
            "bearer": []
          },
          {
            "gym-id": []
          }
        ]
      }
    },
    "/api/v1/gyms/{id}": {
      "get": {
        "operationId": "GymsController_getGym",
        "summary": "Get gym details",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gym details"
          },
          "404": {
            "description": "Gym not found"
          }
        },
        "tags": [
          "Gyms"
        ],
        "security": [
          {
            "bearer": []
          },
          {
            "gym-id": []
          }
        ]
      },
      "put": {
        "operationId": "GymsController_updateGym",
        "summary": "Update gym details",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGymDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Gym updated successfully"
          },
          "404": {
            "description": "Gym not found"
          }
        },
        "tags": [
          "Gyms"
        ],
        "security": [
          {
            "bearer": []
          },
          {
            "gym-id": []
          }
        ]
      }
    },
    "/api/v1/gyms/{id}/stats": {
      "get": {
        "operationId": "GymsController_getGymStats",
        "summary": "Get gym statistics",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gym statistics"
          },
          "404": {
            "description": "Gym not found"
          }
        },
        "tags": [
          "Gyms"
        ],
        "security": [
          {
            "bearer": []
          },
          {
            "gym-id": []
          }
        ]
      }
    },
    "/api/v1/gyms/{id}/toggle-status": {
      "put": {
        "operationId": "GymsController_toggleGymStatus",
        "summary": "Toggle gym active status",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gym status toggled successfully"
          },
          "404": {
            "description": "Gym not found"
          }
        },
        "tags": [
          "Gyms"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/gyms/{id}/schedule": {
      "put": {
        "operationId": "GymsController_updateGymSchedule",
        "summary": "Update gym schedule",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGymScheduleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Gym schedule updated successfully"
          },
          "404": {
            "description": "Gym not found"
          }
        },
        "tags": [
          "Gyms"
        ],
        "security": [
          {
            "bearer": []
          },
          {
            "gym-id": []
          }
        ]
      }
    },
    "/api/v1/gyms/{id}/social-media": {
      "put": {
        "operationId": "GymsController_updateGymSocialMedia",
        "summary": "Update gym social media",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGymSocialMediaDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Gym social media updated successfully"
          },
          "404": {
            "description": "Gym not found"
          }
        },
        "tags": [
          "Gyms"
        ],
        "security": [
          {
            "bearer": []
          },
          {
            "gym-id": []
          }
        ]
      }
    },
    "/api/v1/clients": {
      "post": {
        "operationId": "ClientsController_createClient",
        "summary": "Create a new client",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Client created successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden - Client limit reached"
          }
        },
        "tags": [
          "Clients"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "ClientsController_searchClients",
        "summary": "Search clients in gym",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 20,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search by name, email, client number or document",
            "schema": {
              "example": "john",
              "type": "string"
            }
          },
          {
            "name": "activeOnly",
            "required": false,
            "in": "query",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "clientNumber",
            "required": false,
            "in": "query",
            "description": "Search by exact client number",
            "schema": {
              "example": "CL001",
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "required": false,
            "in": "query",
            "description": "Search by document ID",
            "schema": {
              "example": "12345678",
              "type": "string"
            }
          },
          {
            "name": "includeContractStatus",
            "required": false,
            "in": "query",
            "description": "Include contract status in response",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of clients"
          }
        },
        "tags": [
          "Clients"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/clients/{id}": {
      "get": {
        "operationId": "ClientsController_getClient",
        "summary": "Get client details",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Client details"
          },
          "404": {
            "description": "Client not found"
          }
        },
        "tags": [
          "Clients"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "ClientsController_updateClient",
        "summary": "Update client information",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClientDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Client updated successfully"
          },
          "404": {
            "description": "Client not found"
          }
        },
        "tags": [
          "Clients"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/clients/{id}/toggle-status": {
      "put": {
        "operationId": "ClientsController_toggleClientStatus",
        "summary": "Toggle client active/inactive status",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Client status toggled successfully"
          },
          "404": {
            "description": "Client not found"
          }
        },
        "tags": [
          "Clients"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/clients/stats/available": {
      "get": {
        "operationId": "ClientsController_getAvailableStats",
        "summary": "Get available statistics definitions",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Available statistics definitions"
          }
        },
        "tags": [
          "Clients"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/clients/{id}/stats": {
      "get": {
        "operationId": "ClientsController_getClientStats",
        "summary": "Get client statistics",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Client statistics"
          },
          "404": {
            "description": "Client not found"
          }
        },
        "tags": [
          "Clients"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/clients/{id}/stats/{statKey}": {
      "get": {
        "operationId": "ClientsController_getClientStat",
        "summary": "Get individual client statistic",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "statKey",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Client statistic"
          },
          "404": {
            "description": "Client or statistic not found"
          }
        },
        "tags": [
          "Clients"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/clients/{id}/stats/category/{category}": {
      "get": {
        "operationId": "ClientsController_getClientStatsByCategory",
        "summary": "Get client statistics by category",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Client statistics by category"
          },
          "404": {
            "description": "Client not found"
          }
        },
        "tags": [
          "Clients"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/clients/search/check-in": {
      "get": {
        "operationId": "ClientsController_searchClientsForCheckIn",
        "summary": "Search clients for check-in (includes contract validation)",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 20,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search by name, email, client number or document",
            "schema": {
              "example": "john",
              "type": "string"
            }
          },
          {
            "name": "activeOnly",
            "required": false,
            "in": "query",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "clientNumber",
            "required": false,
            "in": "query",
            "description": "Search by exact client number",
            "schema": {
              "example": "CL001",
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "required": false,
            "in": "query",
            "description": "Search by document ID",
            "schema": {
              "example": "12345678",
              "type": "string"
            }
          },
          {
            "name": "includeContractStatus",
            "required": false,
            "in": "query",
            "description": "Include contract status in response",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of clients with membership status"
          }
        },
        "tags": [
          "Clients"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/membership-plans": {
      "post": {
        "operationId": "MembershipPlansController_createMembershipPlan",
        "summary": "Create a new membership plan",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMembershipPlanDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Membership plan created successfully"
          },
          "400": {
            "description": "Bad request"
          }
        },
        "tags": [
          "Membership Plans"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "MembershipPlansController_getGymMembershipPlans",
        "summary": "Get all membership plans for gym",
        "parameters": [
          {
            "name": "activeOnly",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of membership plans"
          }
        },
        "tags": [
          "Membership Plans"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/membership-plans/{id}": {
      "get": {
        "operationId": "MembershipPlansController_getMembershipPlan",
        "summary": "Get membership plan details",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Membership plan details"
          },
          "404": {
            "description": "Membership plan not found"
          }
        },
        "tags": [
          "Membership Plans"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "MembershipPlansController_updateMembershipPlan",
        "summary": "Update membership plan",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMembershipPlanDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Membership plan updated successfully"
          },
          "404": {
            "description": "Membership plan not found"
          }
        },
        "tags": [
          "Membership Plans"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "MembershipPlansController_deleteMembershipPlan",
        "summary": "Delete membership plan (soft delete)",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Membership plan deleted successfully"
          },
          "400": {
            "description": "Cannot delete plan with active contracts"
          },
          "404": {
            "description": "Membership plan not found"
          }
        },
        "tags": [
          "Membership Plans"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/membership-plans/{id}/stats": {
      "get": {
        "operationId": "MembershipPlansController_getMembershipPlanStats",
        "summary": "Get membership plan statistics",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Membership plan statistics"
          },
          "404": {
            "description": "Membership plan not found"
          }
        },
        "tags": [
          "Membership Plans"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/contracts": {
      "post": {
        "operationId": "ContractsController_createContract",
        "summary": "Create a new contract",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContractDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Contract created successfully"
          },
          "400": {
            "description": "Bad request"
          }
        },
        "tags": [
          "Contracts"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "ContractsController_getGymContracts",
        "summary": "Get contracts for gym",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 20,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by contract status",
            "schema": {
              "enum": [
                "pending",
                "active",
                "expiring_soon",
                "expired",
                "frozen",
                "cancelled",
                "for_renew"
              ],
              "type": "string"
            }
          },
          {
            "name": "clientName",
            "required": false,
            "in": "query",
            "description": "Filter by client name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientId",
            "required": false,
            "in": "query",
            "description": "Filter by client ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDateFrom",
            "required": false,
            "in": "query",
            "description": "Start date for the contract start date range (ISO 8601 format)",
            "schema": {
              "example": "2024-01-01T00:00:00.000Z",
              "type": "string"
            }
          },
          {
            "name": "startDateTo",
            "required": false,
            "in": "query",
            "description": "End date for the contract start date range (ISO 8601 format)",
            "schema": {
              "example": "2024-01-31T23:59:59.999Z",
              "type": "string"
            }
          },
          {
            "name": "endDateFrom",
            "required": false,
            "in": "query",
            "description": "Start date for the contract end date range (ISO 8601 format)",
            "schema": {
              "example": "2024-01-01T00:00:00.000Z",
              "type": "string"
            }
          },
          {
            "name": "endDateTo",
            "required": false,
            "in": "query",
            "description": "End date for the contract end date range (ISO 8601 format)",
            "schema": {
              "example": "2024-01-31T23:59:59.999Z",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of contracts"
          }
        },
        "tags": [
          "Contracts"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/contracts/{id}/renew": {
      "post": {
        "operationId": "ContractsController_renewContract",
        "summary": "Renew an existing contract",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RenewContractDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contract renewed successfully"
          },
          "404": {
            "description": "Contract not found"
          }
        },
        "tags": [
          "Contracts"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/contracts/{id}/freeze": {
      "post": {
        "operationId": "ContractsController_freezeContract",
        "summary": "Freeze a contract",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FreezeContractDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contract frozen successfully"
          },
          "404": {
            "description": "Contract not found"
          }
        },
        "tags": [
          "Contracts"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/contracts/{id}/cancel": {
      "put": {
        "operationId": "ContractsController_cancelContract",
        "summary": "Cancel a contract",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelContractDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contract cancelled successfully"
          },
          "404": {
            "description": "Contract not found"
          }
        },
        "tags": [
          "Contracts"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/contracts/{id}": {
      "get": {
        "operationId": "ContractsController_getContract",
        "summary": "Get contract details",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contract details"
          },
          "404": {
            "description": "Contract not found"
          }
        },
        "tags": [
          "Contracts"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/contracts/client/{clientId}": {
      "get": {
        "operationId": "ContractsController_getClientContracts",
        "summary": "Get client contract history",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of client contracts"
          }
        },
        "tags": [
          "Contracts"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/contracts/update-expired": {
      "post": {
        "operationId": "ContractsController_updateExpiredContracts",
        "summary": "Update expired contracts status (deprecated - use update-status instead)",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Number of contracts updated"
          }
        },
        "tags": [
          "Contracts"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/contracts/update-status": {
      "post": {
        "operationId": "ContractsController_triggerContractStatusUpdate",
        "summary": "Trigger intelligent contract status updates",
        "description": "Manually trigger the intelligent contract status update process that runs on cron",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Contract status updates completed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "expiringSoonCount": {
                      "type": "number"
                    },
                    "expiredCount": {
                      "type": "number"
                    },
                    "executionTime": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Contracts"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/contracts/status-stats": {
      "get": {
        "operationId": "ContractsController_getContractStatusStats",
        "summary": "Get contract status statistics",
        "description": "Returns statistics about contract statuses and contracts needing updates",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Contract status statistics"
          }
        },
        "tags": [
          "Contracts"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/contracts/status-check": {
      "get": {
        "operationId": "ContractsController_getContractsNeedingStatusUpdate",
        "summary": "Check contracts needing status updates",
        "description": "Returns contracts that need status updates for monitoring purposes",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Contracts needing status updates"
          }
        },
        "tags": [
          "Contracts"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/evaluations": {
      "post": {
        "operationId": "EvaluationsController_createEvaluation",
        "summary": "Create a new evaluation for a client",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEvaluationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Evaluation created successfully"
          },
          "400": {
            "description": "Bad request"
          }
        },
        "tags": [
          "Evaluations"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/evaluations/{id}": {
      "get": {
        "operationId": "EvaluationsController_getEvaluation",
        "summary": "Get evaluation details",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Evaluation details"
          },
          "404": {
            "description": "Evaluation not found"
          }
        },
        "tags": [
          "Evaluations"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "EvaluationsController_updateEvaluation",
        "summary": "Update evaluation",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEvaluationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Evaluation updated successfully"
          },
          "404": {
            "description": "Evaluation not found"
          }
        },
        "tags": [
          "Evaluations"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "EvaluationsController_deleteEvaluation",
        "summary": "Delete evaluation",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Evaluation deleted successfully"
          },
          "404": {
            "description": "Evaluation not found"
          }
        },
        "tags": [
          "Evaluations"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/evaluations/client/{clientId}": {
      "get": {
        "operationId": "EvaluationsController_getClientEvaluations",
        "summary": "Get client evaluation history",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Client evaluation history with evolution metrics"
          }
        },
        "tags": [
          "Evaluations"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/evaluations/gym/stats": {
      "get": {
        "operationId": "EvaluationsController_getGymEvaluationStats",
        "summary": "Get gym evaluation statistics",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Gym evaluation statistics"
          }
        },
        "tags": [
          "Evaluations"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/evaluations/{id}/report": {
      "get": {
        "operationId": "EvaluationsController_generateEvaluationReport",
        "summary": "Generate evaluation report",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Evaluation report data"
          }
        },
        "tags": [
          "Evaluations"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/check-ins": {
      "post": {
        "operationId": "CheckInsController_createCheckIn",
        "summary": "Create a check-in for a client",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCheckInDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Check-in created successfully"
          },
          "400": {
            "description": "Bad request"
          }
        },
        "tags": [
          "Check-ins"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "CheckInsController_searchCheckIns",
        "summary": "Search check-ins",
        "parameters": [
          {
            "name": "clientId",
            "required": false,
            "in": "query",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "schema": {
              "example": "2024-01-31",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "example": "10",
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "example": "0",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of check-ins"
          }
        },
        "tags": [
          "Check-ins"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/check-ins/{id}": {
      "get": {
        "operationId": "CheckInsController_getCheckIn",
        "summary": "Get check-in details",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Check-in details"
          },
          "404": {
            "description": "Check-in not found"
          }
        },
        "tags": [
          "Check-ins"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "CheckInsController_deleteCheckIn",
        "summary": "Delete a check-in (today only)",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Check-in deleted successfully"
          },
          "400": {
            "description": "Can only delete today's check-ins"
          },
          "404": {
            "description": "Check-in not found"
          }
        },
        "tags": [
          "Check-ins"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/check-ins/current": {
      "get": {
        "operationId": "CheckInsController_getCurrentlyInGym",
        "summary": "Get clients currently in the gym",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of clients currently in gym"
          }
        },
        "tags": [
          "Check-ins"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/check-ins/stats/{period}": {
      "get": {
        "operationId": "CheckInsController_getGymCheckInStats",
        "summary": "Get gym check-in statistics",
        "parameters": [
          {
            "name": "period",
            "required": true,
            "in": "query",
            "schema": {
              "enum": [
                "day",
                "week",
                "month"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Check-in statistics"
          }
        },
        "tags": [
          "Check-ins"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/check-ins/client/{clientId}/history": {
      "get": {
        "operationId": "CheckInsController_getClientCheckInHistory",
        "summary": "Get client check-in history",
        "parameters": [
          {
            "name": "clientId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Client check-in history"
          }
        },
        "tags": [
          "Check-ins"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/catalog/search": {
      "get": {
        "operationId": "PublicCatalogController_searchCatalog",
        "summary": "Search gyms in public catalog",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "example": "crossfit",
              "type": "string"
            }
          },
          {
            "name": "city",
            "required": false,
            "in": "query",
            "schema": {
              "example": "New York",
              "type": "string"
            }
          },
          {
            "name": "state",
            "required": false,
            "in": "query",
            "schema": {
              "example": "NY",
              "type": "string"
            }
          },
          {
            "name": "latitude",
            "required": false,
            "in": "query",
            "schema": {
              "example": "40.7128",
              "type": "string"
            }
          },
          {
            "name": "longitude",
            "required": false,
            "in": "query",
            "schema": {
              "example": "-74.0060",
              "type": "string"
            }
          },
          {
            "name": "radius",
            "required": false,
            "in": "query",
            "description": "Radius in kilometers",
            "schema": {
              "example": "10",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "example": "10",
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "example": "0",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of gyms matching search criteria"
          }
        },
        "tags": [
          "Public Catalog"
        ]
      }
    },
    "/api/v1/catalog/featured": {
      "get": {
        "operationId": "PublicCatalogController_getFeaturedGyms",
        "summary": "Get featured gyms",
        "parameters": [
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of featured gyms"
          }
        },
        "tags": [
          "Public Catalog"
        ]
      }
    },
    "/api/v1/catalog/cities": {
      "get": {
        "operationId": "PublicCatalogController_getCitiesWithGyms",
        "summary": "Get cities with available gyms",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of cities with gym count"
          }
        },
        "tags": [
          "Public Catalog"
        ]
      }
    },
    "/api/v1/catalog/{slug}": {
      "get": {
        "operationId": "PublicCatalogController_getGymBySlug",
        "summary": "Get gym public details by slug",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gym public details"
          },
          "404": {
            "description": "Gym not found"
          }
        },
        "tags": [
          "Public Catalog"
        ]
      }
    },
    "/api/v1/leads": {
      "post": {
        "operationId": "LeadsController_createLead",
        "summary": "Create a new lead from public catalog",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLeadDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Lead created successfully"
          },
          "400": {
            "description": "Bad request"
          }
        },
        "tags": [
          "Leads"
        ]
      },
      "get": {
        "operationId": "LeadsController_searchLeads",
        "summary": "Search leads",
        "parameters": [
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "NEW",
                "CONTACTED",
                "INTERESTED",
                "CONVERTED",
                "LOST"
              ],
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "example": "john",
              "type": "string"
            }
          },
          {
            "name": "assignedToUserId",
            "required": false,
            "in": "query",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "schema": {
              "example": "2024-01-31",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "example": "10",
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "example": "0",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of leads"
          }
        },
        "tags": [
          "Leads"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/leads/{id}": {
      "get": {
        "operationId": "LeadsController_getLead",
        "summary": "Get lead details",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lead details"
          },
          "404": {
            "description": "Lead not found"
          }
        },
        "tags": [
          "Leads"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "LeadsController_updateLead",
        "summary": "Update lead status and information",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLeadDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Lead updated successfully"
          },
          "404": {
            "description": "Lead not found"
          }
        },
        "tags": [
          "Leads"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/leads/stats/gym": {
      "get": {
        "operationId": "LeadsController_getLeadStats",
        "summary": "Get lead statistics for gym",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Lead statistics"
          }
        },
        "tags": [
          "Leads"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/leads/{id}/convert": {
      "post": {
        "operationId": "LeadsController_convertLead",
        "summary": "Convert lead to client",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lead converted successfully"
          },
          "400": {
            "description": "Lead already converted"
          },
          "404": {
            "description": "Lead not found"
          }
        },
        "tags": [
          "Leads"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/assets/upload": {
      "post": {
        "operationId": "AssetsController_upload",
        "summary": "Upload a new asset",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  },
                  "description": {
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object"
                  }
                },
                "required": [
                  "file"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Asset uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Assets"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/assets": {
      "get": {
        "operationId": "AssetsController_findAll",
        "summary": "Get all assets for the current gym",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all assets",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Assets"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/assets/by-ids": {
      "get": {
        "operationId": "AssetsController_findByIds",
        "summary": "Get multiple assets by IDs",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of assets",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Assets"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/assets/{id}": {
      "get": {
        "operationId": "AssetsController_findOne",
        "summary": "Get asset by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Asset details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Assets"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "AssetsController_delete",
        "summary": "Soft delete an asset",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Asset deleted successfully"
          }
        },
        "tags": [
          "Assets"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/assets/{id}/download-url": {
      "get": {
        "operationId": "AssetsController_getDownloadUrl",
        "summary": "Get signed download URL for an asset",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Download URL",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string"
                    },
                    "filename": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Assets"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/assets/{id}/download": {
      "get": {
        "operationId": "AssetsController_download",
        "summary": "Download asset file",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File stream"
          }
        },
        "tags": [
          "Assets"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/assets/{id}/render": {
      "get": {
        "operationId": "AssetsController_render",
        "summary": "Render/serve asset file directly (for preview)",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File stream for rendering"
          }
        },
        "tags": [
          "Assets"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/files/upload": {
      "post": {
        "operationId": "FilesController_upload",
        "summary": "Upload a new file with unique identifier generation",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The file to upload"
                  },
                  "description": {
                    "type": "string",
                    "description": "Optional description for the file"
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Optional metadata for the file"
                  }
                },
                "required": [
                  "file"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "File uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid file or parameters"
          },
          "413": {
            "description": "File too large"
          }
        },
        "tags": [
          "Files"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/files": {
      "get": {
        "operationId": "FilesController_findAll",
        "summary": "Get all files for the current user",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of user files",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Files"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/files/{id}": {
      "get": {
        "operationId": "FilesController_findOne",
        "summary": "Get file by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "File not found"
          }
        },
        "tags": [
          "Files"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "FilesController_delete",
        "summary": "Soft delete a file",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File deleted successfully"
          },
          "404": {
            "description": "File not found"
          }
        },
        "tags": [
          "Files"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/files/by-ids": {
      "get": {
        "operationId": "FilesController_findByIds",
        "summary": "Get multiple files by IDs",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of files",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Files"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/files/{id}/download": {
      "get": {
        "operationId": "FilesController_download",
        "summary": "Download file",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File stream"
          },
          "404": {
            "description": "File not found"
          }
        },
        "tags": [
          "Files"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/files/{id}/render": {
      "get": {
        "operationId": "FilesController_render",
        "summary": "Render/serve file directly (for preview)",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File stream for rendering"
          },
          "404": {
            "description": "File not found"
          }
        },
        "tags": [
          "Files"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/onboarding/start": {
      "post": {
        "operationId": "OnboardingController_startOnboarding",
        "summary": "Start gym onboarding process",
        "description": "Creates owner account, organization, and initial gym. This is the first step in the onboarding process.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartOnboardingDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Onboarding started successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "success": true,
                    "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                    "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                    "user": {
                      "id": "123e4567-e89b-12d3-a456-426614174000",
                      "email": "john@example.com",
                      "name": "John Doe",
                      "userType": "owner"
                    },
                    "organization": {
                      "id": "123e4567-e89b-12d3-a456-426614174001",
                      "name": "My Fitness Center"
                    },
                    "gym": {
                      "id": "123e4567-e89b-12d3-a456-426614174002",
                      "name": "My Fitness Center - Main Location"
                    },
                    "onboardingStatus": {
                      "currentStep": "account_created",
                      "completionPercentage": 25
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          },
          "409": {
            "description": "User already exists"
          }
        },
        "tags": [
          "Onboarding"
        ]
      }
    },
    "/api/v1/onboarding/gym-settings": {
      "put": {
        "operationId": "OnboardingController_updateGymSettings",
        "summary": "Update gym settings",
        "description": "Configure gym details including business hours, amenities, and branding. This is step 2 of onboarding.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGymSettingsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Gym settings updated successfully"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Gym not found"
          }
        },
        "tags": [
          "Onboarding"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/onboarding/configure-features": {
      "put": {
        "operationId": "OnboardingController_configureFeatures",
        "summary": "Configure gym features",
        "description": "Enable/disable and configure various gym management features. This is step 3 of onboarding.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigureFeaturesDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Features configured successfully"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Gym not found"
          }
        },
        "tags": [
          "Onboarding"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/onboarding/complete": {
      "post": {
        "operationId": "OnboardingController_completeGuidedSetup",
        "summary": "Complete guided setup",
        "description": "Mark the onboarding process as complete. All previous steps must be completed first.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteGuidedSetupDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Onboarding completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "success": true,
                    "message": "Congratulations! Your gym setup is complete.",
                    "onboardingStatus": {
                      "currentStep": "completed",
                      "isCompleted": true,
                      "completionPercentage": 100
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Previous steps not completed"
          },
          "404": {
            "description": "Gym not found"
          }
        },
        "tags": [
          "Onboarding"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/onboarding/status/{gymId}": {
      "get": {
        "operationId": "OnboardingController_getOnboardingStatus",
        "summary": "Get onboarding status",
        "description": "Check the current onboarding progress and next steps",
        "parameters": [
          {
            "name": "gymId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Onboarding status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingStatusDto"
                }
              }
            }
          },
          "404": {
            "description": "Gym not found"
          }
        },
        "tags": [
          "Onboarding"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/dashboard/stats": {
      "get": {
        "operationId": "DashboardController_getDashboardStats",
        "summary": "Get dashboard statistics",
        "description": "Get lightweight statistics for the gym dashboard (counts only, no revenue)",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Dashboard statistics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardStatsDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Dashboard"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/dashboard/contracts-revenue": {
      "get": {
        "operationId": "DashboardController_getContractsRevenue",
        "summary": "Get contracts revenue",
        "description": "Get revenue from contracts within the specified date range",
        "parameters": [
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Start date for the data range (ISO 8601 format)",
            "schema": {
              "example": "2024-01-01T00:00:00.000Z",
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "End date for the data range (ISO 8601 format)",
            "schema": {
              "example": "2024-01-31T23:59:59.999Z",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contracts revenue data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractsRevenueDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Dashboard"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/dashboard/sales-revenue": {
      "get": {
        "operationId": "DashboardController_getSalesRevenue",
        "summary": "Get sales revenue",
        "description": "Get revenue from product sales within the specified date range",
        "parameters": [
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Start date for the data range (ISO 8601 format)",
            "schema": {
              "example": "2024-01-01T00:00:00.000Z",
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "End date for the data range (ISO 8601 format)",
            "schema": {
              "example": "2024-01-31T23:59:59.999Z",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sales revenue data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesRevenueDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Dashboard"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/dashboard/debts": {
      "get": {
        "operationId": "DashboardController_getDebts",
        "summary": "Get total debts",
        "description": "Get outstanding debts within the specified date range",
        "parameters": [
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Start date for the data range (ISO 8601 format)",
            "schema": {
              "example": "2024-01-01T00:00:00.000Z",
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "End date for the data range (ISO 8601 format)",
            "schema": {
              "example": "2024-01-31T23:59:59.999Z",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Debts data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DebtsDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Dashboard"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/dashboard/check-ins": {
      "get": {
        "operationId": "DashboardController_getCheckIns",
        "summary": "Get check-ins count",
        "description": "Get check-ins count within the specified date range",
        "parameters": [
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Start date for the data range (ISO 8601 format)",
            "schema": {
              "example": "2024-01-01T00:00:00.000Z",
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "End date for the data range (ISO 8601 format)",
            "schema": {
              "example": "2024-01-31T23:59:59.999Z",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Check-ins data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckInsDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Dashboard"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/dashboard/new-clients": {
      "get": {
        "operationId": "DashboardController_getNewClients",
        "summary": "Get new clients count",
        "description": "Get new clients count within the specified date range",
        "parameters": [
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Start date for the data range (ISO 8601 format)",
            "schema": {
              "example": "2024-01-01T00:00:00.000Z",
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "End date for the data range (ISO 8601 format)",
            "schema": {
              "example": "2024-01-31T23:59:59.999Z",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "New clients data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewClientsDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Dashboard"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/dashboard/expiring-contracts": {
      "get": {
        "operationId": "DashboardController_getExpiringContracts",
        "summary": "Get expiring contracts",
        "description": "Get contracts that are expiring within the specified date range",
        "parameters": [
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Start date for the data range (ISO 8601 format)",
            "schema": {
              "example": "2024-01-01T00:00:00.000Z",
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "End date for the data range (ISO 8601 format)",
            "schema": {
              "example": "2024-01-31T23:59:59.999Z",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Maximum number of contracts to return",
            "schema": {
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of expiring contracts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExpiringContractDto"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Dashboard"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/products/categories": {
      "post": {
        "operationId": "ProductsController_createCategory",
        "summary": "Create a new product category",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductCategoryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Category created successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "409": {
            "description": "Category name already exists"
          }
        },
        "tags": [
          "Products"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "ProductsController_getCategories",
        "summary": "Get all product categories",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of categories"
          }
        },
        "tags": [
          "Products"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/products/categories/{id}": {
      "put": {
        "operationId": "ProductsController_updateCategory",
        "summary": "Update product category",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductCategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category updated successfully"
          },
          "404": {
            "description": "Category not found"
          }
        },
        "tags": [
          "Products"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ProductsController_deleteCategory",
        "summary": "Delete product category",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category deleted successfully"
          },
          "404": {
            "description": "Category not found"
          },
          "409": {
            "description": "Cannot delete category with products"
          }
        },
        "tags": [
          "Products"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/products": {
      "post": {
        "operationId": "ProductsController_createProduct",
        "summary": "Create a new product",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product created successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "409": {
            "description": "Product name already exists"
          }
        },
        "tags": [
          "Products"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "ProductsController_searchProducts",
        "summary": "Search products with filters and pagination",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term for product name or description",
            "schema": {
              "example": "protein",
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "required": false,
            "in": "query",
            "description": "Filter by category ID",
            "schema": {
              "example": "uuid-category-id",
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Filter by product type (Product or Service)",
            "schema": {
              "example": "Product",
              "enum": [
                "Product",
                "Service"
              ],
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by product status",
            "schema": {
              "example": "active",
              "enum": [
                "active",
                "inactive"
              ],
              "type": "string"
            }
          },
          {
            "name": "inStock",
            "required": false,
            "in": "query",
            "description": "Only show products with stock > 0",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "minPrice",
            "required": false,
            "in": "query",
            "description": "Minimum price filter",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "maxPrice",
            "required": false,
            "in": "query",
            "description": "Maximum price filter",
            "schema": {
              "example": 100,
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort field",
            "schema": {
              "example": "name",
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort direction",
            "schema": {
              "example": "asc",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of products"
          }
        },
        "tags": [
          "Products"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/products/services": {
      "post": {
        "operationId": "ProductsController_createService",
        "summary": "Create a new service",
        "description": "Create a new service (no inventory tracking)",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateServiceDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Service created successfully"
          },
          "400": {
            "description": "Bad request - invalid input data"
          },
          "404": {
            "description": "Category not found"
          },
          "409": {
            "description": "Service name already exists"
          }
        },
        "tags": [
          "Products"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/products/low-stock": {
      "get": {
        "operationId": "ProductsController_getLowStockProducts",
        "summary": "Get products with low stock",
        "parameters": [
          {
            "name": "threshold",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of products with low stock"
          }
        },
        "tags": [
          "Products"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/products/{id}": {
      "get": {
        "operationId": "ProductsController_getProduct",
        "summary": "Get product details",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product details"
          },
          "404": {
            "description": "Product not found"
          }
        },
        "tags": [
          "Products"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "ProductsController_updateProduct",
        "summary": "Update product information",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product updated successfully"
          },
          "404": {
            "description": "Product not found"
          },
          "409": {
            "description": "Product name already exists"
          }
        },
        "tags": [
          "Products"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ProductsController_deleteProduct",
        "summary": "Delete product",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product deleted successfully"
          },
          "404": {
            "description": "Product not found"
          }
        },
        "tags": [
          "Products"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/products/{id}/toggle-status": {
      "patch": {
        "operationId": "ProductsController_toggleProductStatus",
        "summary": "Toggle product active/inactive status",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product status toggled successfully"
          },
          "404": {
            "description": "Product not found"
          }
        },
        "tags": [
          "Products"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/products/{id}/stock": {
      "patch": {
        "operationId": "ProductsController_updateStock",
        "summary": "Update product stock quantity",
        "description": "Updates stock and creates movement record if product has inventory tracking enabled",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStockDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Stock updated successfully"
          },
          "404": {
            "description": "Product not found"
          }
        },
        "tags": [
          "Products"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/products/{id}/stock-movements": {
      "get": {
        "operationId": "ProductsController_getProductStockMovements",
        "summary": "Get product stock movements",
        "description": "Retrieve stock movement history for a specific product",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of stock movements"
          },
          "404": {
            "description": "Product not found"
          }
        },
        "tags": [
          "Products"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/sales": {
      "post": {
        "operationId": "SalesController_createSale",
        "summary": "Create a new sale",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSaleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Sale created successfully"
          },
          "400": {
            "description": "Bad request - validation failed"
          },
          "409": {
            "description": "Insufficient stock or invalid product"
          }
        },
        "tags": [
          "Sales"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "SalesController_searchSales",
        "summary": "Search sales with filters and pagination",
        "parameters": [
          {
            "name": "customerName",
            "required": false,
            "in": "query",
            "description": "Search by customer name",
            "schema": {
              "example": "John",
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": false,
            "in": "query",
            "description": "Filter by customer ID",
            "schema": {
              "example": "uuid-client-id",
              "type": "string"
            }
          },
          {
            "name": "paymentStatus",
            "required": false,
            "in": "query",
            "description": "Filter by payment status",
            "schema": {
              "example": "paid",
              "enum": [
                "paid",
                "unpaid"
              ],
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Start date filter (YYYY-MM-DD)",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "End date filter (YYYY-MM-DD)",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "minTotal",
            "required": false,
            "in": "query",
            "description": "Minimum total amount filter",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "maxTotal",
            "required": false,
            "in": "query",
            "description": "Maximum total amount filter",
            "schema": {
              "example": 1000,
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort field",
            "schema": {
              "example": "saleDate",
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort direction",
            "schema": {
              "example": "desc",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of sales"
          }
        },
        "tags": [
          "Sales"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/sales/stats": {
      "get": {
        "operationId": "SalesController_getSalesStats",
        "summary": "Get sales statistics",
        "parameters": [
          {
            "name": "startDate",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sales statistics"
          }
        },
        "tags": [
          "Sales"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/sales/top-products": {
      "get": {
        "operationId": "SalesController_getTopSellingProducts",
        "summary": "Get top selling products",
        "parameters": [
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Top selling products with statistics"
          }
        },
        "tags": [
          "Sales"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/sales/reports/by-customer": {
      "get": {
        "operationId": "SalesController_getSalesByCustomer",
        "summary": "Get sales report by customer",
        "parameters": [
          {
            "name": "startDate",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sales report grouped by customer"
          }
        },
        "tags": [
          "Sales"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/sales/{id}": {
      "get": {
        "operationId": "SalesController_getSale",
        "summary": "Get sale details",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sale details with items"
          },
          "404": {
            "description": "Sale not found"
          }
        },
        "tags": [
          "Sales"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "SalesController_updateSale",
        "summary": "Update sale information",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSaleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sale updated successfully"
          },
          "404": {
            "description": "Sale not found"
          }
        },
        "tags": [
          "Sales"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "SalesController_deleteSale",
        "summary": "Delete sale and restore stock",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sale deleted successfully"
          },
          "404": {
            "description": "Sale not found"
          }
        },
        "tags": [
          "Sales"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/sales/{id}/payment-status": {
      "put": {
        "operationId": "SalesController_updatePaymentStatus",
        "summary": "Update sale payment status",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePaymentStatusDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment status updated successfully"
          },
          "404": {
            "description": "Sale not found"
          }
        },
        "tags": [
          "Sales"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/suppliers": {
      "post": {
        "operationId": "SuppliersController_createSupplier",
        "summary": "Create a new supplier",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSupplierDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Supplier created successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "409": {
            "description": "Supplier name or email already exists"
          }
        },
        "tags": [
          "Suppliers"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "SuppliersController_searchSuppliers",
        "summary": "Search suppliers with filters and pagination",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term for supplier name, email, or contact info",
            "schema": {
              "example": "acme",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort field",
            "schema": {
              "example": "name",
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort direction",
            "schema": {
              "example": "asc",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of suppliers"
          }
        },
        "tags": [
          "Suppliers"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/suppliers/stats": {
      "get": {
        "operationId": "SuppliersController_getSupplierStats",
        "summary": "Get supplier statistics",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Supplier statistics including contact completeness"
          }
        },
        "tags": [
          "Suppliers"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/suppliers/{id}": {
      "get": {
        "operationId": "SuppliersController_getSupplier",
        "summary": "Get supplier details",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Supplier details"
          },
          "404": {
            "description": "Supplier not found"
          }
        },
        "tags": [
          "Suppliers"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "SuppliersController_updateSupplier",
        "summary": "Update supplier information",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSupplierDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Supplier updated successfully"
          },
          "404": {
            "description": "Supplier not found"
          },
          "409": {
            "description": "Supplier name or email already exists"
          }
        },
        "tags": [
          "Suppliers"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "SuppliersController_deleteSupplier",
        "summary": "Delete supplier",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Supplier deleted successfully"
          },
          "404": {
            "description": "Supplier not found"
          }
        },
        "tags": [
          "Suppliers"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/payment-methods": {
      "post": {
        "operationId": "PaymentMethodsController_createPaymentMethod",
        "summary": "Create a new payment method",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentMethodDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment method created successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "409": {
            "description": "Conflict - Code already exists"
          }
        },
        "tags": [
          "Payment Methods"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "PaymentMethodsController_searchPaymentMethods",
        "summary": "Search payment methods in gym",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 20,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search by name, description or code",
            "schema": {
              "example": "efectivo",
              "type": "string"
            }
          },
          {
            "name": "enabledOnly",
            "required": false,
            "in": "query",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "code",
            "required": false,
            "in": "query",
            "description": "Search by exact payment method code",
            "schema": {
              "example": "CASH_001",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of payment methods"
          }
        },
        "tags": [
          "Payment Methods"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/payment-methods/{id}": {
      "get": {
        "operationId": "PaymentMethodsController_getPaymentMethod",
        "summary": "Get payment method details",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment method details"
          },
          "404": {
            "description": "Payment method not found"
          }
        },
        "tags": [
          "Payment Methods"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "PaymentMethodsController_updatePaymentMethod",
        "summary": "Update payment method information",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePaymentMethodDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment method updated successfully"
          },
          "404": {
            "description": "Payment method not found"
          },
          "409": {
            "description": "Conflict - Code already exists"
          }
        },
        "tags": [
          "Payment Methods"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "PaymentMethodsController_deletePaymentMethod",
        "summary": "Soft delete payment method",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment method deleted successfully"
          },
          "404": {
            "description": "Payment method not found"
          }
        },
        "tags": [
          "Payment Methods"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/payment-methods/{id}/toggle": {
      "put": {
        "operationId": "PaymentMethodsController_togglePaymentMethod",
        "summary": "Toggle payment method enabled/disabled status",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment method status toggled successfully"
          },
          "404": {
            "description": "Payment method not found"
          }
        },
        "tags": [
          "Payment Methods"
        ],
        "security": [
          {
            "gym-id": []
          },
          {
            "bearer": []
          }
        ]
      }
    }
  },
  "info": {
    "title": "GymSpace API",
    "description": "The GymSpace Gym Management System API",
    "version": "1.0",
    "contact": {
      "name": "GymSpace API Support",
      "email": "support@gymspace.com"
    },
    "license": {
      "name": "MIT"
    }
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "User authentication and authorization"
    },
    {
      "name": "Gyms",
      "description": "Gym management operations"
    },
    {
      "name": "Organizations",
      "description": "Organization management"
    },
    {
      "name": "Clients",
      "description": "Client management"
    },
    {
      "name": "Membership Plans",
      "description": "Membership plan management"
    },
    {
      "name": "Contracts",
      "description": "Contract management"
    },
    {
      "name": "Check-ins",
      "description": "Check-in tracking"
    },
    {
      "name": "Evaluations",
      "description": "Client evaluations"
    },
    {
      "name": "Invitations",
      "description": "Invitation management"
    },
    {
      "name": "Leads",
      "description": "Lead management"
    },
    {
      "name": "Public Catalog",
      "description": "Public gym catalog"
    },
    {
      "name": "Dashboard",
      "description": "Dashboard statistics and metrics"
    },
    {
      "name": "Health",
      "description": "Health check endpoints"
    }
  ],
  "servers": [
    {
      "url": "http://localhost:5200/api/v1",
      "description": "Development (localhost)"
    },
    {
      "url": "http://192.168.100.23:5200/api/v1",
      "description": "Development (LAN)"
    },
    {
      "url": "https://api.gymspace.com/api/v1",
      "description": "Production"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      },
      "gym-id": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Gym-Id"
      }
    },
    "schemas": {
      "AvailablePlanDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Plan ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "Plan name",
            "example": "Gratuito"
          },
          "description": {
            "type": "string",
            "description": "Plan description",
            "example": "Plan gratuito para comenzar - 30 días de prueba"
          },
          "price": {
            "type": "object",
            "description": "Price information by currency",
            "example": {
              "USD": {
                "currency": "USD",
                "value": 0
              },
              "COP": {
                "currency": "COP",
                "value": 0
              },
              "MXN": {
                "currency": "MXN",
                "value": 0
              },
              "USD_EC": {
                "currency": "USD",
                "value": 0
              }
            }
          },
          "billingFrequency": {
            "type": "string",
            "description": "Billing frequency",
            "example": "monthly"
          },
          "maxGyms": {
            "type": "number",
            "description": "Maximum number of gyms allowed",
            "example": 1
          },
          "maxClientsPerGym": {
            "type": "number",
            "description": "Maximum clients per gym",
            "example": 10
          },
          "maxUsersPerGym": {
            "type": "number",
            "description": "Maximum users per gym",
            "example": 1
          },
          "features": {
            "type": "object",
            "description": "Plan features",
            "example": {
              "evaluations": 5,
              "checkIns": true,
              "basicReports": false,
              "emailSupport": false,
              "trialPeriod": 30
            }
          },
          "isFreePlan": {
            "type": "boolean",
            "description": "Whether this is a free plan",
            "example": true
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "price",
          "billingFrequency",
          "maxGyms",
          "maxClientsPerGym",
          "maxUsersPerGym",
          "features",
          "isFreePlan"
        ]
      },
      "SubscriptionStatusDto": {
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "subscriptionPlan": {
            "type": "object",
            "description": "Current subscription plan"
          },
          "status": {
            "type": "string",
            "description": "Subscription status",
            "enum": [
              "active",
              "inactive",
              "expired",
              "paused",
              "pending_upgrade"
            ],
            "example": "active"
          },
          "subscriptionStart": {
            "format": "date-time",
            "type": "string",
            "description": "Subscription start date"
          },
          "subscriptionEnd": {
            "format": "date-time",
            "type": "string",
            "description": "Subscription end date"
          },
          "daysRemaining": {
            "type": "number",
            "description": "Days remaining in subscription",
            "example": 25
          },
          "isExpired": {
            "type": "boolean",
            "description": "Whether the subscription is expired",
            "example": false
          },
          "isFreePlan": {
            "type": "boolean",
            "description": "Whether this is a free plan",
            "example": true
          },
          "usage": {
            "type": "object",
            "description": "Current usage statistics"
          },
          "limits": {
            "type": "object",
            "description": "Usage limits based on plan"
          }
        },
        "required": [
          "organizationId",
          "subscriptionPlan",
          "status",
          "subscriptionStart",
          "subscriptionEnd",
          "daysRemaining",
          "isExpired",
          "isFreePlan",
          "usage",
          "limits"
        ]
      },
      "AffiliateOrganizationDto": {
        "type": "object",
        "properties": {
          "subscriptionPlanId": {
            "type": "string",
            "description": "Subscription plan ID to affiliate with (must be a free plan)",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "required": [
          "subscriptionPlanId"
        ]
      },
      "RegisterOwnerDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "example": "john@example.com"
          },
          "phone": {
            "type": "string",
            "example": "+1234567890"
          },
          "password": {
            "type": "string",
            "example": "SecurePassword123!"
          },
          "organizationName": {
            "type": "string",
            "example": "My Fitness Center"
          },
          "country": {
            "type": "string",
            "example": "US"
          },
          "currency": {
            "type": "string",
            "example": "USD"
          },
          "timezone": {
            "type": "string",
            "example": "America/New_York"
          }
        },
        "required": [
          "name",
          "email",
          "phone",
          "password",
          "organizationName"
        ]
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "john@example.com"
          },
          "password": {
            "type": "string",
            "example": "SecurePassword123!"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "LoginResponseDto": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "refresh_token": {
            "type": "string"
          },
          "user": {
            "type": "object"
          },
          "redirectPath": {
            "type": "string"
          }
        },
        "required": [
          "access_token",
          "refresh_token",
          "user",
          "redirectPath"
        ]
      },
      "GenerateVerificationCodeDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "john@example.com",
            "description": "Email address to send verification code"
          },
          "name": {
            "type": "string",
            "example": "John Doe",
            "description": "Full name of the user"
          }
        },
        "required": [
          "email",
          "name"
        ]
      },
      "VerifyEmailDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "john@example.com"
          },
          "code": {
            "type": "string",
            "example": "123456",
            "description": "6-digit verification code"
          }
        },
        "required": [
          "email",
          "code"
        ]
      },
      "ResendVerificationDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "john@example.com"
          }
        },
        "required": [
          "email"
        ]
      },
      "RegisterCollaboratorDto": {
        "type": "object",
        "properties": {
          "invitationToken": {
            "type": "string",
            "example": "abc123def456",
            "description": "Invitation token"
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "phone": {
            "type": "string",
            "example": "+1234567890"
          },
          "password": {
            "type": "string",
            "example": "SecurePassword123!"
          }
        },
        "required": [
          "invitationToken",
          "name",
          "phone",
          "password"
        ]
      },
      "CurrentSessionDto": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "Current access token"
          },
          "user": {
            "type": "object",
            "description": "Current authenticated user"
          },
          "gym": {
            "type": "object",
            "description": "Current selected gym context"
          },
          "organization": {
            "type": "object",
            "description": "User organization"
          },
          "subscription": {
            "type": "object",
            "description": "Organization active subscription"
          },
          "permissions": {
            "description": "User permissions in current context",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isAuthenticated": {
            "type": "boolean",
            "description": "Whether user is authenticated"
          }
        },
        "required": [
          "accessToken",
          "user",
          "permissions",
          "isAuthenticated"
        ]
      },
      "ChangePasswordDto": {
        "type": "object",
        "properties": {
          "currentPassword": {
            "type": "string",
            "description": "Current password of the user",
            "example": "CurrentPass123!"
          },
          "newPassword": {
            "type": "string",
            "description": "New password for the user",
            "example": "NewSecurePass456!",
            "minLength": 8
          }
        },
        "required": [
          "currentPassword",
          "newPassword"
        ]
      },
      "ChangePasswordResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the password change was successful",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Contraseña actualizada exitosamente"
          }
        },
        "required": [
          "success",
          "message"
        ]
      },
      "RequestPasswordResetDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address to send the reset code",
            "example": "user@example.com"
          }
        },
        "required": [
          "email"
        ]
      },
      "RequestPasswordResetResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the reset code was sent successfully",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Message describing the result",
            "example": "Reset code sent to your email"
          }
        },
        "required": [
          "success",
          "message"
        ]
      },
      "VerifyResetCodeDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address associated with the reset code",
            "example": "user@example.com"
          },
          "code": {
            "type": "string",
            "description": "Reset code received via email",
            "example": "123456"
          }
        },
        "required": [
          "email",
          "code"
        ]
      },
      "VerifyResetCodeResponseDto": {
        "type": "object",
        "properties": {
          "resetToken": {
            "type": "string",
            "description": "Temporary token for password reset",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "expiresIn": {
            "type": "number",
            "description": "Token expiration time in seconds",
            "example": 1200
          }
        },
        "required": [
          "resetToken",
          "expiresIn"
        ]
      },
      "ResetPasswordDto": {
        "type": "object",
        "properties": {
          "resetToken": {
            "type": "string",
            "description": "Reset token obtained from code verification",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "newPassword": {
            "type": "string",
            "description": "New password for the account",
            "example": "NewSecurePassword123!"
          }
        },
        "required": [
          "resetToken",
          "newPassword"
        ]
      },
      "ResetPasswordResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the password was reset successfully",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Message describing the result",
            "example": "Password reset successfully"
          }
        },
        "required": [
          "success",
          "message"
        ]
      },
      "ResendResetCodeDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address to resend the reset code",
            "example": "user@example.com"
          }
        },
        "required": [
          "email"
        ]
      },
      "ResendResetCodeResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the reset code was resent successfully",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Message describing the result",
            "example": "Reset code resent to your email"
          }
        },
        "required": [
          "success",
          "message"
        ]
      },
      "CreateInvitationDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "john.trainer@example.com"
          },
          "gymId": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "roleId": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174001"
          }
        },
        "required": [
          "email",
          "gymId",
          "roleId"
        ]
      },
      "AcceptInvitationDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Trainer"
          },
          "phone": {
            "type": "string",
            "example": "+1234567890"
          },
          "password": {
            "type": "string",
            "example": "SecurePassword123!"
          }
        },
        "required": [
          "name",
          "phone",
          "password"
        ]
      },
      "UserProfileDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "john.doe@example.com"
          },
          "name": {
            "type": "string",
            "description": "User full name",
            "example": "John Doe"
          },
          "phone": {
            "type": "string",
            "description": "User phone number",
            "example": "+1234567890"
          },
          "birthDate": {
            "type": "string",
            "description": "User birth date",
            "example": "1990-01-15",
            "format": "date"
          },
          "userType": {
            "type": "string",
            "description": "User type",
            "enum": [
              "owner",
              "collaborator"
            ],
            "example": "owner"
          },
          "emailVerified": {
            "type": "boolean",
            "description": "Email verification status",
            "example": true
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Account creation date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update date",
            "example": "2024-01-01T00:00:00.000Z"
          }
        },
        "required": [
          "id",
          "email",
          "name",
          "userType",
          "emailVerified",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateProfileDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User full name",
            "example": "John Doe",
            "minLength": 2,
            "maxLength": 100
          },
          "phone": {
            "type": "string",
            "description": "User phone number",
            "example": "+1234567890"
          },
          "birthDate": {
            "type": "string",
            "description": "User birth date",
            "example": "1990-01-15",
            "format": "date"
          }
        }
      },
      "ListOrganizationsResponseDto": {
        "type": "object",
        "properties": {}
      },
      "UpdateOrganizationDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Mi Gimnasio Elite",
            "description": "Organization name",
            "minLength": 2,
            "maxLength": 100
          }
        },
        "required": [
          "name"
        ]
      },
      "CreateGymDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "PowerFit Downtown"
          },
          "address": {
            "type": "string",
            "example": "123 Main Street"
          },
          "city": {
            "type": "string",
            "example": "New York"
          },
          "state": {
            "type": "string",
            "example": "NY"
          },
          "postalCode": {
            "type": "string",
            "example": "10001"
          },
          "phone": {
            "type": "string",
            "example": "+1234567890"
          },
          "email": {
            "type": "string",
            "example": "info@powerfit.com"
          },
          "openingTime": {
            "type": "string",
            "example": "08:00"
          },
          "closingTime": {
            "type": "string",
            "example": "22:00"
          },
          "capacity": {
            "type": "number",
            "example": 150
          },
          "amenities": {
            "type": "object",
            "example": {
              "hasParking": true,
              "hasShowers": true,
              "hasLockers": true
            }
          },
          "settings": {
            "type": "object",
            "example": {
              "logo": "https://example.com/logo.png",
              "primaryColor": "#FF0000"
            }
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateCurrentGymDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the gym",
            "example": "PowerFit Downtown"
          },
          "address": {
            "type": "string",
            "description": "Gym address",
            "example": "123 Main Street"
          },
          "phone": {
            "type": "string",
            "description": "Contact phone number",
            "example": "+1234567890"
          },
          "email": {
            "type": "string",
            "description": "Contact email",
            "example": "info@powerfit.com"
          },
          "assetId": {
            "type": "string",
            "description": "Asset ID for gym logo or image",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        }
      },
      "UpdateGymDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "PowerFit Downtown"
          },
          "address": {
            "type": "string",
            "example": "123 Main Street"
          },
          "city": {
            "type": "string",
            "example": "New York"
          },
          "state": {
            "type": "string",
            "example": "NY"
          },
          "postalCode": {
            "type": "string",
            "example": "10001"
          },
          "phone": {
            "type": "string",
            "example": "+1234567890"
          },
          "email": {
            "type": "string",
            "example": "info@powerfit.com"
          },
          "openingTime": {
            "type": "string",
            "example": "08:00"
          },
          "closingTime": {
            "type": "string",
            "example": "22:00"
          },
          "capacity": {
            "type": "number",
            "example": 150
          },
          "amenities": {
            "type": "object",
            "example": {
              "hasParking": true,
              "hasShowers": true,
              "hasLockers": true
            }
          },
          "settings": {
            "type": "object",
            "example": {
              "logo": "https://example.com/logo.png",
              "primaryColor": "#FF0000"
            }
          }
        }
      },
      "TimeSlot": {
        "type": "object",
        "properties": {
          "open": {
            "type": "string",
            "example": "06:00",
            "description": "Opening time in HH:MM format"
          },
          "close": {
            "type": "string",
            "example": "12:00",
            "description": "Closing time in HH:MM format"
          }
        },
        "required": [
          "open",
          "close"
        ]
      },
      "DaySchedule": {
        "type": "object",
        "properties": {
          "isOpen": {
            "type": "boolean",
            "description": "Is the gym open this day",
            "example": true
          },
          "slots": {
            "description": "Time slots for the day",
            "example": [
              {
                "open": "06:00",
                "close": "12:00"
              },
              {
                "open": "16:00",
                "close": "21:00"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeSlot"
            }
          }
        },
        "required": [
          "isOpen",
          "slots"
        ]
      },
      "UpdateGymScheduleDto": {
        "type": "object",
        "properties": {
          "monday": {
            "description": "Monday schedule",
            "allOf": [
              {
                "$ref": "#/components/schemas/DaySchedule"
              }
            ]
          },
          "tuesday": {
            "description": "Tuesday schedule",
            "allOf": [
              {
                "$ref": "#/components/schemas/DaySchedule"
              }
            ]
          },
          "wednesday": {
            "description": "Wednesday schedule",
            "allOf": [
              {
                "$ref": "#/components/schemas/DaySchedule"
              }
            ]
          },
          "thursday": {
            "description": "Thursday schedule",
            "allOf": [
              {
                "$ref": "#/components/schemas/DaySchedule"
              }
            ]
          },
          "friday": {
            "description": "Friday schedule",
            "allOf": [
              {
                "$ref": "#/components/schemas/DaySchedule"
              }
            ]
          },
          "saturday": {
            "description": "Saturday schedule",
            "allOf": [
              {
                "$ref": "#/components/schemas/DaySchedule"
              }
            ]
          },
          "sunday": {
            "description": "Sunday schedule",
            "allOf": [
              {
                "$ref": "#/components/schemas/DaySchedule"
              }
            ]
          }
        },
        "required": [
          "monday",
          "tuesday",
          "wednesday",
          "thursday",
          "friday",
          "saturday",
          "sunday"
        ]
      },
      "UpdateGymSocialMediaDto": {
        "type": "object",
        "properties": {
          "facebook": {
            "type": "string",
            "description": "Facebook page URL",
            "example": "https://facebook.com/gymspace"
          },
          "instagram": {
            "type": "string",
            "description": "Instagram username",
            "example": "@gymspace"
          },
          "whatsapp": {
            "type": "string",
            "description": "WhatsApp phone number",
            "example": "+1234567890"
          },
          "twitter": {
            "type": "string",
            "description": "Twitter/X username",
            "example": "@gymspace"
          },
          "linkedin": {
            "type": "string",
            "description": "LinkedIn page URL",
            "example": "https://linkedin.com/company/gymspace"
          },
          "youtube": {
            "type": "string",
            "description": "YouTube channel URL",
            "example": "https://youtube.com/c/gymspace"
          },
          "tiktok": {
            "type": "string",
            "description": "TikTok username",
            "example": "@gymspace"
          }
        }
      },
      "CreateClientDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "example": "john.doe@example.com"
          },
          "phone": {
            "type": "string",
            "example": "+1234567890"
          },
          "documentValue": {
            "type": "string",
            "example": "12345678"
          },
          "documentType": {
            "type": "string",
            "example": "DNI"
          },
          "birthDate": {
            "type": "string",
            "example": "1990-01-01"
          },
          "gender": {
            "type": "string",
            "example": "male"
          },
          "maritalStatus": {
            "type": "string",
            "example": "single"
          },
          "address": {
            "type": "string",
            "example": "123 Main St"
          },
          "city": {
            "type": "string",
            "example": "New York"
          },
          "state": {
            "type": "string",
            "example": "NY"
          },
          "postalCode": {
            "type": "string",
            "example": "10001"
          },
          "occupation": {
            "type": "string",
            "example": "Software Developer"
          },
          "notes": {
            "type": "string",
            "example": "Emergency Contact: Jane Doe - +1234567891"
          },
          "profilePhotoId": {
            "type": "string",
            "example": "profile-photo-uuid"
          },
          "customData": {
            "type": "object",
            "example": {
              "referredBy": "Facebook",
              "interests": [
                "Weight Loss",
                "Muscle Gain"
              ]
            }
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateClientDto": {
        "type": "object",
        "properties": {}
      },
      "CreateMembershipPlanDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Plan Mensual"
          },
          "description": {
            "type": "string",
            "example": "Acceso completo al gimnasio durante un mes"
          },
          "basePrice": {
            "type": "number",
            "example": 49.99
          },
          "durationMonths": {
            "type": "number",
            "example": 1,
            "description": "Duration in months"
          },
          "durationDays": {
            "type": "number",
            "example": 30,
            "description": "Duration in days"
          },
          "termsAndConditions": {
            "type": "string",
            "example": "Terms and conditions text"
          },
          "allowsCustomPricing": {
            "type": "boolean",
            "example": false
          },
          "maxEvaluations": {
            "type": "number",
            "example": 4
          },
          "includesAdvisor": {
            "type": "boolean",
            "example": false
          },
          "showInCatalog": {
            "type": "boolean",
            "example": true
          },
          "features": {
            "example": [
              "Acceso completo",
              "Clases grupales",
              "Evaluación mensual"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string",
            "example": "active",
            "description": "Plan status",
            "enum": [
              "active",
              "inactive",
              "archived"
            ]
          },
          "assetsIds": {
            "example": [
              "asset-id-1",
              "asset-id-2"
            ],
            "description": "Array of asset IDs for plan images",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "basePrice"
        ]
      },
      "UpdateMembershipPlanDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Plan Mensual"
          },
          "description": {
            "type": "string",
            "example": "Acceso completo al gimnasio durante un mes"
          },
          "basePrice": {
            "type": "number",
            "example": 49.99
          },
          "durationMonths": {
            "type": "number",
            "example": 1,
            "description": "Duration in months"
          },
          "durationDays": {
            "type": "number",
            "example": 30,
            "description": "Duration in days"
          },
          "termsAndConditions": {
            "type": "string",
            "example": "Terms and conditions text"
          },
          "allowsCustomPricing": {
            "type": "boolean",
            "example": false
          },
          "maxEvaluations": {
            "type": "number",
            "example": 4
          },
          "includesAdvisor": {
            "type": "boolean",
            "example": false
          },
          "showInCatalog": {
            "type": "boolean",
            "example": true
          },
          "features": {
            "example": [
              "Acceso completo",
              "Clases grupales",
              "Evaluación mensual"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string",
            "example": "active",
            "description": "Plan status",
            "enum": [
              "active",
              "inactive",
              "archived"
            ]
          },
          "assetsIds": {
            "example": [
              "asset-id-1",
              "asset-id-2"
            ],
            "description": "Array of asset IDs for plan images",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isActive": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "CreateContractDto": {
        "type": "object",
        "properties": {
          "gymClientId": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "gymMembershipPlanId": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174001"
          },
          "paymentMethodId": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174002"
          },
          "startDate": {
            "type": "string",
            "example": "2024-01-01",
            "description": "Contract start date"
          },
          "discountPercentage": {
            "type": "number",
            "example": 0,
            "description": "Discount percentage (0-100)"
          },
          "customPrice": {
            "type": "number",
            "example": 49.99,
            "description": "Custom price override"
          },
          "receiptIds": {
            "example": [
              "123e4567-e89b-12d3-a456-426614174002"
            ],
            "description": "Array of asset IDs for contract receipts",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "example": {
              "paymentMethod": "credit_card",
              "referredBy": "John Doe",
              "notes": "Special promotion"
            }
          }
        },
        "required": [
          "gymClientId",
          "gymMembershipPlanId",
          "paymentMethodId",
          "startDate"
        ]
      },
      "RenewContractDto": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "example": "2024-02-01",
            "description": "New start date"
          },
          "paymentMethodId": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174002",
            "description": "Payment method ID for renewal (uses existing if not provided)"
          },
          "discountPercentage": {
            "type": "number",
            "example": 0,
            "description": "Discount percentage for renewal"
          },
          "customPrice": {
            "type": "number",
            "example": 49.99,
            "description": "Custom price for renewal"
          },
          "applyAtEndOfContract": {
            "type": "boolean",
            "example": true,
            "description": "Apply renewal at the end of current contract"
          },
          "notes": {
            "type": "string",
            "example": "Special discount notes",
            "description": "Notes for the renewal contract"
          },
          "contractDocumentId": {
            "type": "string",
            "example": "doc-123",
            "description": "Contract document ID"
          },
          "receiptIds": {
            "example": [
              "receipt-1",
              "receipt-2"
            ],
            "description": "Receipt IDs for the renewal",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "FreezeContractDto": {
        "type": "object",
        "properties": {
          "freezeStartDate": {
            "type": "string",
            "example": "2024-01-15",
            "description": "Freeze start date"
          },
          "freezeEndDate": {
            "type": "string",
            "example": "2024-01-30",
            "description": "Freeze end date"
          },
          "reason": {
            "type": "string",
            "example": "Medical reasons",
            "description": "Reason for freezing"
          }
        },
        "required": [
          "freezeStartDate",
          "freezeEndDate"
        ]
      },
      "CancelContractDto": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "Reason for cancelling the contract",
            "example": "Medical reasons",
            "minLength": 3
          }
        },
        "required": [
          "reason"
        ]
      },
      "CreateEvaluationDto": {
        "type": "object",
        "properties": {
          "gymClientId": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "weight": {
            "type": "number",
            "example": 75.5,
            "description": "Weight in kg"
          },
          "height": {
            "type": "number",
            "example": 175,
            "description": "Height in cm"
          },
          "bodyFatPercentage": {
            "type": "number",
            "example": 25,
            "description": "Body fat percentage"
          },
          "muscleMassPercentage": {
            "type": "number",
            "example": 40,
            "description": "Muscle mass percentage"
          },
          "measurements": {
            "type": "object",
            "example": {
              "chest": 100,
              "waist": 85,
              "hips": 95,
              "leftArm": 30,
              "rightArm": 30,
              "leftThigh": 55,
              "rightThigh": 55
            },
            "description": "Body measurements in cm"
          },
          "healthMetrics": {
            "type": "object",
            "example": {
              "bloodPressure": "120/80",
              "restingHeartRate": 65,
              "vo2Max": 45
            },
            "description": "Health metrics"
          },
          "performanceMetrics": {
            "type": "object",
            "example": {
              "benchPress": 80,
              "squat": 100,
              "deadlift": 120
            },
            "description": "Performance metrics in kg"
          },
          "notes": {
            "type": "string",
            "example": "Client has improved significantly"
          },
          "goals": {
            "type": "string",
            "example": "Build muscle mass and reduce body fat"
          },
          "recommendations": {
            "type": "string",
            "example": "Increase protein intake and maintain training frequency"
          }
        },
        "required": [
          "gymClientId",
          "weight",
          "height"
        ]
      },
      "UpdateEvaluationDto": {
        "type": "object",
        "properties": {
          "gymClientId": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "weight": {
            "type": "number",
            "example": 75.5,
            "description": "Weight in kg"
          },
          "height": {
            "type": "number",
            "example": 175,
            "description": "Height in cm"
          },
          "bodyFatPercentage": {
            "type": "number",
            "example": 25,
            "description": "Body fat percentage"
          },
          "muscleMassPercentage": {
            "type": "number",
            "example": 40,
            "description": "Muscle mass percentage"
          },
          "measurements": {
            "type": "object",
            "example": {
              "chest": 100,
              "waist": 85,
              "hips": 95,
              "leftArm": 30,
              "rightArm": 30,
              "leftThigh": 55,
              "rightThigh": 55
            },
            "description": "Body measurements in cm"
          },
          "healthMetrics": {
            "type": "object",
            "example": {
              "bloodPressure": "120/80",
              "restingHeartRate": 65,
              "vo2Max": 45
            },
            "description": "Health metrics"
          },
          "performanceMetrics": {
            "type": "object",
            "example": {
              "benchPress": 80,
              "squat": 100,
              "deadlift": 120
            },
            "description": "Performance metrics in kg"
          },
          "notes": {
            "type": "string",
            "example": "Client has improved significantly"
          },
          "goals": {
            "type": "string",
            "example": "Build muscle mass and reduce body fat"
          },
          "recommendations": {
            "type": "string",
            "example": "Increase protein intake and maintain training frequency"
          }
        }
      },
      "CreateCheckInDto": {
        "type": "object",
        "properties": {
          "gymClientId": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "description": "ID of the gym client checking in"
          },
          "notes": {
            "type": "string",
            "example": "Client feeling good today"
          }
        },
        "required": [
          "gymClientId"
        ]
      },
      "CreateLeadDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "example": "john.doe@example.com"
          },
          "phone": {
            "type": "string",
            "example": "+1234567890"
          },
          "gymId": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "message": {
            "type": "string",
            "example": "I would like to know more about membership plans"
          },
          "source": {
            "type": "string",
            "example": "Website Contact Form"
          },
          "metadata": {
            "type": "object",
            "example": {
              "preferredContactTime": "morning",
              "interests": [
                "weight loss",
                "muscle gain"
              ]
            }
          }
        },
        "required": [
          "name",
          "email",
          "phone",
          "gymId"
        ]
      },
      "UpdateLeadDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "NEW",
              "CONTACTED",
              "INTERESTED",
              "CONVERTED",
              "LOST"
            ],
            "example": "CONTACTED"
          },
          "notes": {
            "type": "string",
            "example": "Follow up scheduled for next week"
          },
          "assignedToUserId": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "metadata": {
            "type": "object",
            "example": {
              "lastContactDate": "2024-01-15",
              "nextFollowUp": "2024-01-22"
            }
          }
        }
      },
      "AssetResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the asset"
          },
          "filename": {
            "type": "string",
            "description": "Generated filename for storage"
          },
          "originalName": {
            "type": "string",
            "description": "Original filename uploaded by user"
          },
          "fileSize": {
            "type": "number",
            "description": "File size in bytes"
          },
          "mimeType": {
            "type": "string",
            "description": "MIME type of the file"
          },
          "status": {
            "type": "string",
            "description": "Status of the asset",
            "enum": [
              "active",
              "deleted"
            ]
          },
          "description": {
            "type": "string",
            "description": "Optional description"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata"
          },
          "previewUrl": {
            "type": "string",
            "description": "Preview URL for previewable assets (images, PDFs, videos)"
          },
          "uploadedBy": {
            "type": "string",
            "description": "User ID who uploaded the asset"
          },
          "createdAt": {
            "type": "string",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last update timestamp"
          },
          "filePath": {
            "type": "string",
            "description": "File path in storage"
          },
          "entityType": {
            "type": "string",
            "description": "Entity type this asset belongs to"
          },
          "entityId": {
            "type": "string",
            "description": "Entity ID this asset belongs to"
          }
        },
        "required": [
          "id",
          "filename",
          "originalName",
          "fileSize",
          "mimeType",
          "status",
          "uploadedBy",
          "createdAt",
          "updatedAt",
          "filePath"
        ]
      },
      "FileResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the file",
            "example": "f47ac10b-58cc-4372-a567-0e02b2c3d479"
          },
          "filename": {
            "type": "string",
            "description": "Generated unique filename",
            "example": "a1b2c3d4e5f6.jpg"
          },
          "originalName": {
            "type": "string",
            "description": "Original filename as uploaded",
            "example": "profile_photo.jpg"
          },
          "filePath": {
            "type": "string",
            "description": "Path to the file in storage",
            "example": "files/a1b2c3d4e5f6.jpg"
          },
          "fileSize": {
            "type": "number",
            "description": "File size in bytes",
            "example": 1024000
          },
          "mimeType": {
            "type": "string",
            "description": "MIME type of the file",
            "example": "image/jpeg"
          },
          "status": {
            "type": "string",
            "description": "Status of the file",
            "example": "active"
          },
          "metadata": {
            "type": "object",
            "description": "Optional metadata",
            "example": {
              "category": "profile"
            }
          },
          "description": {
            "type": "string",
            "description": "Optional description",
            "example": "Client profile photo"
          },
          "createdAt": {
            "type": "string",
            "description": "Date when the file was created",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date when the file was last updated",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "userId": {
            "type": "string",
            "description": "User ID who owns the file",
            "example": "user-123"
          },
          "previewUrl": {
            "type": "string",
            "description": "Preview URL for the file if it is previewable",
            "example": "https://api.example.com/api/v1/files/f47ac10b-58cc-4372-a567-0e02b2c3d479/render"
          }
        },
        "required": [
          "id",
          "filename",
          "originalName",
          "filePath",
          "fileSize",
          "mimeType",
          "status",
          "createdAt",
          "updatedAt",
          "userId"
        ]
      },
      "StartOnboardingDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe",
            "description": "Full name of the gym owner"
          },
          "email": {
            "type": "string",
            "example": "john@example.com",
            "description": "Email address for the owner account"
          },
          "phone": {
            "type": "string",
            "example": "+1234567890",
            "description": "Contact phone number"
          },
          "password": {
            "type": "string",
            "example": "SecurePassword123!",
            "description": "Password for the owner account"
          },
          "organizationName": {
            "type": "string",
            "example": "My Fitness Center",
            "description": "Name of the organization/company"
          },
          "country": {
            "type": "string",
            "example": "US",
            "description": "Country code (ISO 3166-1 alpha-2)"
          },
          "currency": {
            "type": "string",
            "example": "USD",
            "description": "Currency code (ISO 4217)"
          },
          "timezone": {
            "type": "string",
            "example": "America/New_York",
            "description": "IANA timezone identifier"
          },
          "subscriptionPlanId": {
            "type": "string",
            "example": "uuid-here",
            "description": "Optional subscription plan ID. If not provided, default free plan will be used"
          }
        },
        "required": [
          "name",
          "email",
          "phone",
          "password",
          "organizationName",
          "country",
          "currency",
          "timezone"
        ]
      },
      "BusinessHoursDto": {
        "type": "object",
        "properties": {
          "open": {
            "type": "string",
            "example": "08:00",
            "description": "Opening time in HH:MM format"
          },
          "close": {
            "type": "string",
            "example": "22:00",
            "description": "Closing time in HH:MM format"
          },
          "closed": {
            "type": "boolean",
            "example": false,
            "description": "Whether the gym is closed on this day"
          }
        },
        "required": [
          "open",
          "close",
          "closed"
        ]
      },
      "WeeklyScheduleDto": {
        "type": "object",
        "properties": {
          "monday": {
            "$ref": "#/components/schemas/BusinessHoursDto"
          },
          "tuesday": {
            "$ref": "#/components/schemas/BusinessHoursDto"
          },
          "wednesday": {
            "$ref": "#/components/schemas/BusinessHoursDto"
          },
          "thursday": {
            "$ref": "#/components/schemas/BusinessHoursDto"
          },
          "friday": {
            "$ref": "#/components/schemas/BusinessHoursDto"
          },
          "saturday": {
            "$ref": "#/components/schemas/BusinessHoursDto"
          },
          "sunday": {
            "$ref": "#/components/schemas/BusinessHoursDto"
          }
        },
        "required": [
          "monday",
          "tuesday",
          "wednesday",
          "thursday",
          "friday",
          "saturday",
          "sunday"
        ]
      },
      "SocialMediaDto": {
        "type": "object",
        "properties": {
          "facebook": {
            "type": "string",
            "example": "https://facebook.com/mygym"
          },
          "instagram": {
            "type": "string",
            "example": "https://instagram.com/mygym"
          },
          "twitter": {
            "type": "string",
            "example": "https://twitter.com/mygym"
          },
          "website": {
            "type": "string",
            "example": "https://www.mygym.com"
          }
        }
      },
      "UpdateGymSettingsDto": {
        "type": "object",
        "properties": {
          "gymId": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "description": "Gym ID to update"
          },
          "name": {
            "type": "string",
            "example": "PowerFit Downtown",
            "description": "Name of the gym"
          },
          "address": {
            "type": "string",
            "example": "123 Main Street",
            "description": "Street address"
          },
          "city": {
            "type": "string",
            "example": "New York",
            "description": "City"
          },
          "state": {
            "type": "string",
            "example": "NY",
            "description": "State or province"
          },
          "postalCode": {
            "type": "string",
            "example": "10001",
            "description": "Postal/ZIP code"
          },
          "phone": {
            "type": "string",
            "example": "+1234567890",
            "description": "Gym contact phone"
          },
          "email": {
            "type": "string",
            "example": "info@powerfit.com",
            "description": "Gym contact email"
          },
          "businessHours": {
            "description": "Weekly business hours schedule",
            "allOf": [
              {
                "$ref": "#/components/schemas/WeeklyScheduleDto"
              }
            ]
          },
          "capacity": {
            "type": "number",
            "example": 150,
            "description": "Maximum gym capacity"
          },
          "description": {
            "type": "string",
            "example": "The best gym in downtown with state-of-the-art equipment",
            "description": "Gym description"
          },
          "socialMedia": {
            "description": "Social media links",
            "allOf": [
              {
                "$ref": "#/components/schemas/SocialMediaDto"
              }
            ]
          },
          "logo": {
            "type": "string",
            "example": "https://example.com/logo.png",
            "description": "Logo URL"
          },
          "coverPhoto": {
            "type": "string",
            "example": "https://example.com/cover.png",
            "description": "Cover photo URL"
          },
          "primaryColor": {
            "type": "string",
            "example": "#FF0000",
            "description": "Primary brand color"
          }
        },
        "required": [
          "gymId",
          "name",
          "address",
          "city",
          "state",
          "postalCode",
          "phone",
          "email",
          "businessHours",
          "capacity"
        ]
      },
      "ClientManagementDto": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "example": true,
            "description": "Enable client registration and management"
          },
          "requireDocumentId": {
            "type": "boolean",
            "example": true,
            "description": "Require document ID for clients"
          },
          "enablePhotos": {
            "type": "boolean",
            "example": true,
            "description": "Enable client photo uploads"
          },
          "trackEmergencyContacts": {
            "type": "boolean",
            "example": true,
            "description": "Track emergency contacts"
          },
          "trackMedicalConditions": {
            "type": "boolean",
            "example": true,
            "description": "Track medical conditions"
          }
        },
        "required": [
          "enabled",
          "requireDocumentId",
          "enablePhotos",
          "trackEmergencyContacts",
          "trackMedicalConditions"
        ]
      },
      "MembershipManagementDto": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "example": true,
            "description": "Enable membership plans and contracts"
          },
          "allowCustomPricing": {
            "type": "boolean",
            "example": true,
            "description": "Allow custom pricing for contracts"
          },
          "allowContractFreezing": {
            "type": "boolean",
            "example": true,
            "description": "Enable contract freezing"
          },
          "expiryWarningDays": {
            "type": "number",
            "example": 30,
            "description": "Days before expiry to mark as expiring soon"
          },
          "autoRenewalReminders": {
            "type": "boolean",
            "example": true,
            "description": "Send automatic renewal reminders"
          }
        },
        "required": [
          "enabled",
          "allowCustomPricing",
          "allowContractFreezing",
          "expiryWarningDays",
          "autoRenewalReminders"
        ]
      },
      "CheckInSystemDto": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "example": true,
            "description": "Enable check-in tracking"
          },
          "requireActiveContract": {
            "type": "boolean",
            "example": true,
            "description": "Require active contract for check-in"
          },
          "trackCheckInTime": {
            "type": "boolean",
            "example": true,
            "description": "Track check-in times"
          },
          "allowMultiplePerDay": {
            "type": "boolean",
            "example": false,
            "description": "Allow multiple check-ins per day"
          }
        },
        "required": [
          "enabled",
          "requireActiveContract",
          "trackCheckInTime",
          "allowMultiplePerDay"
        ]
      },
      "EvaluationSystemDto": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "example": true,
            "description": "Enable physical evaluations"
          },
          "trackMeasurements": {
            "type": "boolean",
            "example": true,
            "description": "Track body measurements"
          },
          "trackBodyComposition": {
            "type": "boolean",
            "example": true,
            "description": "Track body composition"
          },
          "trackPerformance": {
            "type": "boolean",
            "example": true,
            "description": "Track performance metrics"
          },
          "defaultFrequencyDays": {
            "type": "number",
            "example": 90,
            "description": "Default days between evaluations"
          }
        },
        "required": [
          "enabled",
          "trackMeasurements",
          "trackBodyComposition",
          "trackPerformance",
          "defaultFrequencyDays"
        ]
      },
      "LeadManagementDto": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "example": true,
            "description": "Enable lead capture and management"
          },
          "publicCatalogListing": {
            "type": "boolean",
            "example": true,
            "description": "Show gym in public catalog"
          },
          "enableOnlineForm": {
            "type": "boolean",
            "example": true,
            "description": "Enable online lead form"
          },
          "autoAssignLeads": {
            "type": "boolean",
            "example": true,
            "description": "Auto-assign leads to staff"
          }
        },
        "required": [
          "enabled",
          "publicCatalogListing",
          "enableOnlineForm",
          "autoAssignLeads"
        ]
      },
      "NotificationSettingsDto": {
        "type": "object",
        "properties": {
          "emailEnabled": {
            "type": "boolean",
            "example": true,
            "description": "Enable email notifications"
          },
          "smsEnabled": {
            "type": "boolean",
            "example": false,
            "description": "Enable SMS notifications"
          },
          "welcomeEmails": {
            "type": "boolean",
            "example": true,
            "description": "Send welcome emails to new clients"
          },
          "contractExpiryAlerts": {
            "type": "boolean",
            "example": true,
            "description": "Send contract expiry notifications"
          },
          "evaluationReminders": {
            "type": "boolean",
            "example": true,
            "description": "Send evaluation reminders"
          }
        },
        "required": [
          "emailEnabled",
          "smsEnabled",
          "welcomeEmails",
          "contractExpiryAlerts",
          "evaluationReminders"
        ]
      },
      "ConfigureFeaturesDto": {
        "type": "object",
        "properties": {
          "gymId": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "description": "Gym ID to configure"
          },
          "clientManagement": {
            "description": "Client management features",
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientManagementDto"
              }
            ]
          },
          "membershipManagement": {
            "description": "Membership and contract features",
            "allOf": [
              {
                "$ref": "#/components/schemas/MembershipManagementDto"
              }
            ]
          },
          "checkInSystem": {
            "description": "Check-in system features",
            "allOf": [
              {
                "$ref": "#/components/schemas/CheckInSystemDto"
              }
            ]
          },
          "evaluationSystem": {
            "description": "Evaluation system features",
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluationSystemDto"
              }
            ]
          },
          "leadManagement": {
            "description": "Lead management features",
            "allOf": [
              {
                "$ref": "#/components/schemas/LeadManagementDto"
              }
            ]
          },
          "notifications": {
            "description": "Notification settings",
            "allOf": [
              {
                "$ref": "#/components/schemas/NotificationSettingsDto"
              }
            ]
          }
        },
        "required": [
          "gymId",
          "clientManagement",
          "membershipManagement",
          "checkInSystem",
          "evaluationSystem",
          "leadManagement",
          "notifications"
        ]
      },
      "CompleteGuidedSetupDto": {
        "type": "object",
        "properties": {
          "gymId": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "description": "Gym ID to complete setup for"
          }
        },
        "required": [
          "gymId"
        ]
      },
      "OnboardingStatusDto": {
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "description": "Organization ID"
          },
          "gymId": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "description": "Gym ID"
          },
          "currentStep": {
            "type": "string",
            "enum": [
              "account_created",
              "gym_settings",
              "features_configured",
              "completed"
            ],
            "example": "gym_settings",
            "description": "Current onboarding step"
          },
          "accountCreated": {
            "type": "boolean",
            "example": true,
            "description": "Whether account creation is completed"
          },
          "gymSettingsCompleted": {
            "type": "boolean",
            "example": false,
            "description": "Whether gym settings are completed"
          },
          "featuresConfigured": {
            "type": "boolean",
            "example": false,
            "description": "Whether features are configured"
          },
          "isCompleted": {
            "type": "boolean",
            "example": false,
            "description": "Whether entire onboarding is completed"
          },
          "nextAction": {
            "type": "string",
            "example": "Configure your gym settings",
            "description": "Next action to take"
          },
          "completionPercentage": {
            "type": "number",
            "example": 50,
            "description": "Completion percentage"
          }
        },
        "required": [
          "organizationId",
          "gymId",
          "currentStep",
          "accountCreated",
          "gymSettingsCompleted",
          "featuresConfigured",
          "isCompleted",
          "nextAction",
          "completionPercentage"
        ]
      },
      "DashboardStatsDto": {
        "type": "object",
        "properties": {
          "totalClients": {
            "type": "number",
            "description": "Total number of clients in the gym",
            "example": 156
          },
          "activeClients": {
            "type": "number",
            "description": "Number of active clients (with active contracts)",
            "example": 142
          },
          "totalContracts": {
            "type": "number",
            "description": "Total number of contracts",
            "example": 168
          },
          "activeContracts": {
            "type": "number",
            "description": "Number of active contracts",
            "example": 142
          },
          "monthlyRevenue": {
            "type": "number",
            "description": "Monthly revenue for the current month",
            "example": 4250
          },
          "todayCheckIns": {
            "type": "number",
            "description": "Number of check-ins today",
            "example": 23
          },
          "expiringContractsCount": {
            "type": "number",
            "description": "Number of contracts expiring in the next 30 days",
            "example": 8
          },
          "newClientsThisMonth": {
            "type": "number",
            "description": "Number of new clients registered this month",
            "example": 12
          }
        },
        "required": [
          "totalClients",
          "activeClients",
          "totalContracts",
          "activeContracts",
          "monthlyRevenue",
          "todayCheckIns",
          "expiringContractsCount",
          "newClientsThisMonth"
        ]
      },
      "ContractsRevenueDto": {
        "type": "object",
        "properties": {
          "totalRevenue": {
            "type": "number",
            "description": "Total revenue from contracts in the specified period",
            "example": 15250
          },
          "contractCount": {
            "type": "number",
            "description": "Number of contracts contributing to this revenue",
            "example": 45
          },
          "averageRevenue": {
            "type": "number",
            "description": "Average revenue per contract",
            "example": 338.89
          },
          "startDate": {
            "type": "string",
            "description": "Start date of the data range",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "endDate": {
            "type": "string",
            "description": "End date of the data range",
            "example": "2024-01-31T23:59:59.999Z"
          }
        },
        "required": [
          "totalRevenue",
          "contractCount",
          "averageRevenue",
          "startDate",
          "endDate"
        ]
      },
      "SalesRevenueDto": {
        "type": "object",
        "properties": {
          "totalRevenue": {
            "type": "number",
            "description": "Total revenue from sales in the specified period",
            "example": 5250
          },
          "salesCount": {
            "type": "number",
            "description": "Number of sales transactions",
            "example": 156
          },
          "averageRevenue": {
            "type": "number",
            "description": "Average revenue per sale",
            "example": 33.65
          },
          "startDate": {
            "type": "string",
            "description": "Start date of the data range",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "endDate": {
            "type": "string",
            "description": "End date of the data range",
            "example": "2024-01-31T23:59:59.999Z"
          }
        },
        "required": [
          "totalRevenue",
          "salesCount",
          "averageRevenue",
          "startDate",
          "endDate"
        ]
      },
      "DebtsDto": {
        "type": "object",
        "properties": {
          "totalDebt": {
            "type": "number",
            "description": "Total outstanding debt amount",
            "example": 3500
          },
          "clientsWithDebt": {
            "type": "number",
            "description": "Number of clients with outstanding debts",
            "example": 12
          },
          "averageDebt": {
            "type": "number",
            "description": "Average debt per client",
            "example": 291.67
          },
          "startDate": {
            "type": "string",
            "description": "Start date of the data range",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "endDate": {
            "type": "string",
            "description": "End date of the data range",
            "example": "2024-01-31T23:59:59.999Z"
          }
        },
        "required": [
          "totalDebt",
          "clientsWithDebt",
          "averageDebt",
          "startDate",
          "endDate"
        ]
      },
      "CheckInsDto": {
        "type": "object",
        "properties": {
          "totalCheckIns": {
            "type": "number",
            "description": "Total number of check-ins in the specified period",
            "example": 345
          },
          "uniqueClients": {
            "type": "number",
            "description": "Number of unique clients who checked in",
            "example": 89
          },
          "averagePerDay": {
            "type": "number",
            "description": "Average check-ins per day",
            "example": 11.13
          },
          "startDate": {
            "type": "string",
            "description": "Start date of the data range",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "endDate": {
            "type": "string",
            "description": "End date of the data range",
            "example": "2024-01-31T23:59:59.999Z"
          }
        },
        "required": [
          "totalCheckIns",
          "uniqueClients",
          "averagePerDay",
          "startDate",
          "endDate"
        ]
      },
      "NewClientsDto": {
        "type": "object",
        "properties": {
          "totalNewClients": {
            "type": "number",
            "description": "Number of new clients registered in the specified period",
            "example": 25
          },
          "averagePerDay": {
            "type": "number",
            "description": "Average new clients per day",
            "example": 0.81
          },
          "startDate": {
            "type": "string",
            "description": "Start date of the data range",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "endDate": {
            "type": "string",
            "description": "End date of the data range",
            "example": "2024-01-31T23:59:59.999Z"
          }
        },
        "required": [
          "totalNewClients",
          "averagePerDay",
          "startDate",
          "endDate"
        ]
      },
      "ExpiringContractDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Contract ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "clientName": {
            "type": "string",
            "description": "Client name",
            "example": "Ana Martínez"
          },
          "clientId": {
            "type": "string",
            "description": "Client ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "planName": {
            "type": "string",
            "description": "Membership plan name",
            "example": "Plan Premium"
          },
          "endDate": {
            "type": "string",
            "description": "Contract end date",
            "example": "2024-01-20T00:00:00Z"
          },
          "daysRemaining": {
            "type": "number",
            "description": "Days remaining until expiration",
            "example": 5
          }
        },
        "required": [
          "id",
          "clientName",
          "clientId",
          "planName",
          "endDate",
          "daysRemaining"
        ]
      },
      "CreateProductCategoryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Supplements",
            "description": "Category name"
          },
          "description": {
            "type": "string",
            "example": "Nutritional supplements and vitamins"
          },
          "color": {
            "type": "string",
            "example": "#FF5733",
            "description": "Category color in hex format"
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateProductCategoryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Supplements",
            "description": "Category name"
          },
          "description": {
            "type": "string",
            "example": "Nutritional supplements and vitamins"
          },
          "color": {
            "type": "string",
            "example": "#FF5733",
            "description": "Category color in hex format"
          }
        }
      },
      "CreateProductDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Protein Powder",
            "description": "Product name"
          },
          "description": {
            "type": "string",
            "example": "High-quality whey protein powder for muscle building"
          },
          "price": {
            "type": "number",
            "example": 29.99,
            "description": "Product price"
          },
          "stock": {
            "type": "number",
            "example": 100,
            "description": "Initial stock quantity"
          },
          "categoryId": {
            "type": "string",
            "example": "uuid-category-id",
            "description": "Product category ID"
          },
          "imageId": {
            "type": "string",
            "example": "uuid-asset-id",
            "description": "Product image asset ID"
          },
          "status": {
            "type": "string",
            "example": "active",
            "enum": [
              "active",
              "inactive"
            ],
            "description": "Product status"
          }
        },
        "required": [
          "name",
          "price"
        ]
      },
      "CreateServiceDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Personal Training Session",
            "description": "Service name",
            "minLength": 2
          },
          "description": {
            "type": "string",
            "example": "One-on-one personal training session with a certified trainer",
            "description": "Service description"
          },
          "price": {
            "type": "number",
            "example": 50,
            "description": "Service price per session",
            "minimum": 0
          },
          "categoryId": {
            "type": "string",
            "example": "uuid-category-id",
            "description": "Service category ID"
          },
          "imageId": {
            "type": "string",
            "example": "uuid-asset-id",
            "description": "Service image asset ID"
          }
        },
        "required": [
          "name",
          "price"
        ]
      },
      "UpdateProductDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Protein Powder",
            "description": "Product name"
          },
          "description": {
            "type": "string",
            "example": "High-quality whey protein powder for muscle building"
          },
          "price": {
            "type": "number",
            "example": 29.99,
            "description": "Product price"
          },
          "stock": {
            "type": "number",
            "example": 100,
            "description": "Initial stock quantity"
          },
          "categoryId": {
            "type": "string",
            "example": "uuid-category-id",
            "description": "Product category ID"
          },
          "imageId": {
            "type": "string",
            "example": "uuid-asset-id",
            "description": "Product image asset ID"
          },
          "status": {
            "type": "string",
            "example": "active",
            "enum": [
              "active",
              "inactive"
            ],
            "description": "Product status"
          }
        }
      },
      "UpdateStockDto": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "number",
            "example": 10,
            "description": "New stock quantity (absolute value)"
          },
          "notes": {
            "type": "string",
            "example": "Restock from supplier ABC",
            "description": "Optional notes about the stock update"
          },
          "supplierId": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "description": "Optional supplier ID"
          },
          "fileId": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174001",
            "description": "Optional file ID for receipt/document"
          }
        },
        "required": [
          "quantity"
        ]
      },
      "SaleItemDto": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "example": "uuid-product-id",
            "description": "Product ID"
          },
          "quantity": {
            "type": "number",
            "example": 2,
            "description": "Quantity of product"
          },
          "unitPrice": {
            "type": "number",
            "example": 29.99,
            "description": "Unit price at time of sale"
          }
        },
        "required": [
          "productId",
          "quantity",
          "unitPrice"
        ]
      },
      "CreateSaleDto": {
        "type": "object",
        "properties": {
          "items": {
            "description": "Array of sale items",
            "example": [
              {
                "productId": "uuid-product-id",
                "quantity": 2,
                "unitPrice": 29.99
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SaleItemDto"
            }
          },
          "customerId": {
            "type": "string",
            "example": "uuid-client-id",
            "description": "Customer ID from gym clients"
          },
          "customerName": {
            "type": "string",
            "example": "John Doe",
            "description": "Customer name"
          },
          "notes": {
            "type": "string",
            "example": "Customer requested extra packaging",
            "description": "Sale notes"
          },
          "fileIds": {
            "example": [
              "file-uuid-1",
              "file-uuid-2"
            ],
            "description": "Array of file IDs attached to this sale",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "paymentStatus": {
            "type": "string",
            "example": "paid",
            "enum": [
              "paid",
              "unpaid"
            ],
            "description": "Payment status"
          },
          "paymentMethodId": {
            "type": "string",
            "example": "uuid-payment-method-id",
            "description": "Payment method ID"
          }
        },
        "required": [
          "items"
        ]
      },
      "UpdateSaleDto": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string",
            "example": "uuid-client-id",
            "description": "Customer ID from gym clients"
          },
          "customerName": {
            "type": "string",
            "example": "John Doe",
            "description": "Customer name"
          },
          "notes": {
            "type": "string",
            "example": "Updated notes",
            "description": "Sale notes"
          },
          "fileIds": {
            "example": [
              "file-uuid-1",
              "file-uuid-2"
            ],
            "description": "Array of file IDs attached to this sale",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "paymentStatus": {
            "type": "string",
            "example": "paid",
            "enum": [
              "paid",
              "unpaid"
            ],
            "description": "Payment status"
          },
          "paymentMethodId": {
            "type": "string",
            "example": "uuid-payment-method-id",
            "description": "Payment method ID"
          }
        }
      },
      "UpdatePaymentStatusDto": {
        "type": "object",
        "properties": {
          "paymentStatus": {
            "type": "string",
            "example": "paid",
            "enum": [
              "paid",
              "unpaid"
            ],
            "description": "New payment status"
          }
        },
        "required": [
          "paymentStatus"
        ]
      },
      "CreateSupplierDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Acme Supplements Inc.",
            "description": "Supplier name"
          },
          "contactInfo": {
            "type": "string",
            "example": "Premium supplement distributor with 20+ years of experience",
            "description": "Supplier contact information and description"
          },
          "phone": {
            "type": "string",
            "example": "+1-555-123-4567",
            "description": "Supplier phone number"
          },
          "email": {
            "type": "string",
            "example": "sales@acmesupplements.com",
            "description": "Supplier email"
          },
          "address": {
            "type": "string",
            "example": "123 Industrial Ave, Business District, NY 10001",
            "description": "Supplier address"
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateSupplierDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Acme Supplements Inc.",
            "description": "Supplier name"
          },
          "contactInfo": {
            "type": "string",
            "example": "Premium supplement distributor with 20+ years of experience",
            "description": "Supplier contact information and description"
          },
          "phone": {
            "type": "string",
            "example": "+1-555-123-4567",
            "description": "Supplier phone number"
          },
          "email": {
            "type": "string",
            "example": "sales@acmesupplements.com",
            "description": "Supplier email"
          },
          "address": {
            "type": "string",
            "example": "123 Industrial Ave, Business District, NY 10001",
            "description": "Supplier address"
          }
        }
      },
      "CreatePaymentMethodDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Efectivo"
          },
          "description": {
            "type": "string",
            "example": "Pagos en efectivo para membresías y productos"
          },
          "code": {
            "type": "string",
            "example": "CASH_001",
            "description": "Unique code for the payment method"
          },
          "enabled": {
            "type": "boolean",
            "example": true,
            "description": "Whether the payment method is enabled"
          },
          "metadata": {
            "type": "object",
            "example": {
              "processingFee": 0.03,
              "provider": "stripe",
              "accountId": "acct_123456789"
            },
            "description": "Additional metadata for the payment method"
          }
        },
        "required": [
          "name",
          "code"
        ]
      },
      "UpdatePaymentMethodDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Efectivo"
          },
          "description": {
            "type": "string",
            "example": "Pagos en efectivo para membresías y productos"
          },
          "code": {
            "type": "string",
            "example": "CASH_001",
            "description": "Unique code for the payment method"
          },
          "enabled": {
            "type": "boolean",
            "example": true,
            "description": "Whether the payment method is enabled"
          },
          "metadata": {
            "type": "object",
            "example": {
              "processingFee": 0.03,
              "provider": "stripe",
              "accountId": "acct_123456789"
            },
            "description": "Additional metadata for the payment method"
          }
        }
      }
    }
  }
}